//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace libavutil
{
    /// <summary>
    /// Buffer to print data progressively
    /// 
    /// The string buffer grows as necessary and is always 0-terminated.
    /// The content of the string is never accessed, and thus is
    /// encoding-agnostic and can even hold binary data.
    /// 
    /// Small buffers are kept in the structure itself, and thus require no
    /// memory allocation at all (unless the contents of the buffer is needed
    /// after the structure goes out of scope). This is almost as lightweight
    /// as
    /// declaring a local "char buf[512]".
    /// 
    /// The length of the string can go beyond the allocated size: the buffer
    /// is
    /// then truncated, but the functions still keep account of the actual
    /// total
    /// length.
    /// 
    /// In other words, buf->len can be greater than buf->size and records the
    /// total length of what would have been to the buffer if there had been
    /// enough memory.
    /// 
    /// Append operations do not need to be tested for failure: if a memory
    /// allocation fails, data stop being appended to the buffer, but the
    /// length
    /// is still updated. This situation can be tested with
    /// av_bprint_is_complete().
    /// 
    /// The size_max field determines several possible behaviours:
    /// 
    /// size_max = -1 (= UINT_MAX) or any large value will let the buffer be
    /// reallocated as necessary, with an amortized linear cost.
    /// 
    /// size_max = 0 prevents writing anything to the buffer: only the total
    /// length is computed. The write operations can then possibly be repeated
    /// in
    /// a buffer with exactly the necessary size
    /// (using size_init = size_max = len + 1).
    /// 
    /// size_max = 1 is automatically replaced by the exact size available in
    /// the
    /// structure itself, thus ensuring no dynamic memory allocation. The
    /// internal buffer is large enough to hold a reasonable paragraph of text,
    /// such as the current paragraph.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct AVBPrint
    {
        [FieldOffset(0)]
        public sbyte* str;

        [FieldOffset(4)]
        public uint len;

        [FieldOffset(8)]
        public uint size;

        [FieldOffset(12)]
        public uint size_max;

        [FieldOffset(16)]
        public fixed sbyte reserved_internal_buffer[1];

        [FieldOffset(17)]
        public fixed sbyte reserved_padding[1004];
    }

    public unsafe partial class libavutil
    {
        /// <summary>
        /// Init a print buffer.
        /// 
        /// @param buf        buffer to init
        /// @param size_init  initial size (including the final 0)
        /// @param size_max   maximum size;
        /// 0 means do not write anything, just count the length;
        /// 1 is replaced by the maximum value for automatic storage;
        /// any large value means that the internal buffer will be
        /// reallocated as needed up to that limit; -1 is converted to
        /// UINT_MAX, the largest limit possible.
        /// Check also AV_BPRINT_SIZE_* macros.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_bprint_init")]
        internal static extern void av_bprint_init(AVBPrint* buf, uint size_init, uint size_max);

        /// <summary>
        /// Init a print buffer using a pre-existing buffer.
        /// 
        /// The buffer will not be reallocated.
        /// 
        /// @param buf     buffer structure to init
        /// @param buffer  byte buffer to use for the string data
        /// @param size    size of buffer
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_bprint_init_for_buffer")]
        internal static extern void av_bprint_init_for_buffer(AVBPrint* buf, sbyte* buffer, uint size);

        /// <summary>
        /// Append a formated string to a print buffer.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_bprintf")]
        internal static extern void av_bprintf(AVBPrint* buf, global::System.IntPtr fmt);

        /// <summary>
        /// Append char c n times to a print buffer.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_bprint_chars")]
        internal static extern void av_bprint_chars(AVBPrint* buf, sbyte c, uint n);

        /// <summary>
        /// Reset the string to "" but keep internal allocated data.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_bprint_clear")]
        internal static extern void av_bprint_clear(AVBPrint* buf);

        /// <summary>
        /// Test if the print buffer is complete (not truncated).
        /// 
        /// It may have been truncated due to a memory allocation failure
        /// or the size_max limit (compare size and size_max if necessary).
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_bprint_is_complete")]
        internal static extern int av_bprint_is_complete(AVBPrint* buf);

        /// <summary>
        /// Finalize a print buffer.
        /// 
        /// The print buffer can no longer be used afterwards,
        /// but the len and size fields are still valid.
        /// 
        /// @arg[out] ret_str  if not NULL, used to return a permanent copy of the
        /// buffer contents, or NULL if memory allocation fails;
        /// if NULL, the buffer is discarded and freed
        /// @return  0 for success or error code (probably AVERROR(ENOMEM))
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_bprint_finalize")]
        internal static extern int av_bprint_finalize(AVBPrint* buf, sbyte* ret_str);
    }
}
