//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace libavutil
{
    public unsafe partial class libavutil
    {
        /// <summary>
        /// Return the flags which specify extensions supported by the CPU.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_get_cpu_flags")]
        internal static extern int av_get_cpu_flags();

        /// <summary>
        /// Disables cpu detection and forces the specified flags.
        /// -1 is a special case that disables forcing of specific flags.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_force_cpu_flags")]
        internal static extern void av_force_cpu_flags(int flags);

        /// <summary>
        /// Set a mask on flags returned by av_get_cpu_flags().
        /// This function is mainly useful for testing.
        /// Please use av_force_cpu_flags() and av_get_cpu_flags() instead which
        /// are more flexible
        /// 
        /// @warning this function is not thread safe.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_set_cpu_flags_mask")]
        internal static extern void av_set_cpu_flags_mask(int mask);

        /// <summary>
        /// Parse CPU flags from a string.
        /// 
        /// The returned flags contain the specified flags as well as related
        /// unspecified flags.
        /// 
        /// This function exists only for compatibility with libav.
        /// Please use av_parse_cpu_caps() when possible.
        /// @return a combination of AV_CPU_* flags, negative on error.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_parse_cpu_flags")]
        internal static extern int av_parse_cpu_flags(global::System.IntPtr s);

        /// <summary>
        /// Parse CPU caps from a string and update the given AV_CPU_* flags based
        /// on that.
        /// 
        /// @return negative on error.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_parse_cpu_caps")]
        internal static extern int av_parse_cpu_caps(uint* flags, global::System.IntPtr s);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="ff_get_cpu_flags_arm")]
        internal static extern int ff_get_cpu_flags_arm();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="ff_get_cpu_flags_ppc")]
        internal static extern int ff_get_cpu_flags_ppc();

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="ff_get_cpu_flags_x86")]
        internal static extern int ff_get_cpu_flags_x86();
    }
}
