//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace libavutil
{
    public unsafe partial class libavutil
    {
        /// <summary>
        /// Read the file with name filename, and put its content in a newly
        /// allocated buffer or map it with mmap() when available.
        /// In case of success set *bufptr to the read or mmapped buffer, and
        /// size to the size in bytes of the buffer in *bufptr.
        /// The returned buffer must be released with av_file_unmap().
        /// 
        /// @param log_offset loglevel offset used for logging
        /// @param log_ctx context used for logging
        /// @return a non negative number in case of success, a negative value
        /// corresponding to an AVERROR error code in case of failure
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_file_map")]
        internal static extern int av_file_map(global::System.IntPtr filename, byte* bufptr, uint* size, int log_offset, global::System.IntPtr log_ctx);

        /// <summary>
        /// Unmap or free the buffer bufptr created by av_file_map().
        /// 
        /// @param size size in bytes of bufptr, must be the same as returned
        /// by av_file_map()
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_file_unmap")]
        internal static extern void av_file_unmap(byte* bufptr, uint size);

        /// <summary>
        /// Wrapper to work around the lack of mkstemp() on mingw.
        /// Also, tries to create file in /tmp first, if possible.
        /// prefix can be a character constant; *filename will be allocated
        /// internally.
        /// @return file descriptor of opened file (or -1 on error)
        /// and opened file name in **filename.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_tempfile")]
        internal static extern int av_tempfile(global::System.IntPtr prefix, sbyte* filename, int log_offset, global::System.IntPtr log_ctx);
    }
}
