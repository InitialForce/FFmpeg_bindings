//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace libavutil
{
    public unsafe partial class libavutil
    {
        /// <summary>
        /// Parse str and store the parsed ratio in q.
        /// 
        /// Note that a ratio with infinite (1/0) or negative value is
        /// considered valid, so you should check on the returned value if you
        /// want to exclude those values.
        /// 
        /// The undefined value can be expressed using the "0:0" string.
        /// 
        /// @param[in,out] q pointer to the AVRational which will contain the ratio
        /// @param[in] str the string to parse: it has to be a string in the format
        /// num:den, a float number or an expression
        /// @param[in] max the maximum allowed numerator and denominator
        /// @param[in] log_offset log level offset which is applied to the log
        /// level of log_ctx
        /// @param[in] log_ctx parent logging context
        /// @return >= 0 on success, a negative error code otherwise
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_parse_ratio")]
        internal static extern int av_parse_ratio(AVRational* q, global::System.IntPtr str, int max, int log_offset, global::System.IntPtr log_ctx);

        /// <summary>
        /// Parse str and put in width_ptr and height_ptr the detected values.
        /// 
        /// @param[in,out] width_ptr pointer to the variable which will contain the
        /// detected
        /// width value
        /// @param[in,out] height_ptr pointer to the variable which will contain
        /// the detected
        /// height value
        /// @param[in] str the string to parse: it has to be a string in the format
        /// width x height or a valid video size abbreviation.
        /// @return >= 0 on success, a negative error code otherwise
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_parse_video_size")]
        internal static extern int av_parse_video_size(int* width_ptr, int* height_ptr, global::System.IntPtr str);

        /// <summary>
        /// Parse str and store the detected values in *rate.
        /// 
        /// @param[in,out] rate pointer to the AVRational which will contain the
        /// detected
        /// frame rate
        /// @param[in] str the string to parse: it has to be a string in the format
        /// rate_num / rate_den, a float number or a valid video rate abbreviation
        /// @return >= 0 on success, a negative error code otherwise
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_parse_video_rate")]
        internal static extern int av_parse_video_rate(AVRational* rate, global::System.IntPtr str);

        /// <summary>
        /// Put the RGBA values that correspond to color_string in rgba_color.
        /// 
        /// @param color_string a string specifying a color. It can be the name of
        /// a color (case insensitive match) or a [0x|#]RRGGBB[AA] sequence,
        /// possibly followed by "@" and a string representing the alpha
        /// component.
        /// The alpha component may be a string composed by "0x" followed by an
        /// hexadecimal number or a decimal number between 0.0 and 1.0, which
        /// represents the opacity value (0x00/0.0 means completely transparent,
        /// 0xff/1.0 completely opaque).
        /// If the alpha component is not specified then 0xff is assumed.
        /// The string "random" will result in a random color.
        /// @param slen length of the initial part of color_string containing the
        /// color. It can be set to -1 if color_string is a null terminated string
        /// containing nothing else than the color.
        /// @return >= 0 in case of success, a negative value in case of
        /// failure (for example if color_string cannot be parsed).
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_parse_color")]
        internal static extern int av_parse_color(byte* rgba_color, global::System.IntPtr color_string, int slen, global::System.IntPtr log_ctx);

        /// <summary>
        /// Parse timestr and return in *time a corresponding number of
        /// microseconds.
        /// 
        /// @param timeval puts here the number of microseconds corresponding
        /// to the string in timestr. If the string represents a duration, it
        /// is the number of microseconds contained in the time interval.  If
        /// the string is a date, is the number of microseconds since 1st of
        /// January, 1970 up to the time of the parsed date.  If timestr cannot
        /// be successfully parsed, set *time to INT64_MIN.
        /// 
        /// @param timestr a string representing a date or a duration.
        /// - If a date the syntax is:
        /// @code
        /// [{YYYY-MM-DD|YYYYMMDD}[T|t|
        /// ]]{{HH:MM:SS[.m...]]]}|{HHMMSS[.m...]]]}}[Z]
        /// now
        /// @endcode
        /// If the value is "now" it takes the current time.
        /// Time is local time unless Z is appended, in which case it is
        /// interpreted as UTC.
        /// If the year-month-day part is not specified it takes the current
        /// year-month-day.
        /// - If a duration the syntax is:
        /// @code
        /// [-]HH:MM:SS[.m...]]]
        /// [-]S+[.m...]
        /// @endcode
        /// @param duration flag which tells how to interpret timestr, if not
        /// zero timestr is interpreted as a duration, otherwise as a date
        /// @return 0 in case of success, a negative value corresponding to an
        /// AVERROR code otherwise
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_parse_time")]
        internal static extern int av_parse_time(long* timeval, global::System.IntPtr timestr, int duration);

        /// <summary>
        /// Parse the input string p according to the format string fmt and
        /// store its results in the structure dt.
        /// This implementation supports only a subset of the formats supported
        /// by the standard strptime().
        /// 
        /// In particular it actually supports the parameters:
        /// - %H: the hour as a decimal number, using a 24-hour clock, in the
        /// range '00' through '23'
        /// - %M: the minute as a decimal number, using a 24-hour clock, in the
        /// range '00' through '59'
        /// - %S: the second as a decimal number, using a 24-hour clock, in the
        /// range '00' through '59'
        /// - %Y: the year as a decimal number, using the Gregorian calendar
        /// - %m: the month as a decimal number, in the range '1' through '12'
        /// - %d: the day of the month as a decimal number, in the range '1'
        /// through '31'
        /// - %%: a literal '%'
        /// 
        /// @return a pointer to the first character not processed in this
        /// function call, or NULL in case the function fails to match all of
        /// the fmt string and therefore an error occurred
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_small_strptime")]
        internal static extern sbyte* av_small_strptime(global::System.IntPtr p, global::System.IntPtr fmt, tm* dt);

        /// <summary>
        /// Attempt to find a specific tag in a URL.
        /// 
        /// syntax: '?tag1=val1&tag2=val2...'. Little URL decoding is done.
        /// Return 1 if found.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_find_info_tag")]
        internal static extern int av_find_info_tag(sbyte* arg, int arg_size, global::System.IntPtr tag1, global::System.IntPtr info);

        /// <summary>
        /// Convert the decomposed UTC time in tm to a time_t value.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-51.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_timegm")]
        internal static extern long av_timegm(tm* tm);
    }
}
