//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace libavcodec
{
    public enum RDFTransformType
    {
        DFT_R2C = 0,
        IDFT_C2R = 1,
        IDFT_R2C = 2,
        DFT_C2R = 3
    }

    public enum DCTTransformType
    {
        DCT_II = 0,
        DCT_III = 1,
        DCT_I = 2,
        DST_I = 3
    }

    /// <summary>
    /// @defgroup lavc_fft FFT functions
    /// @ingroup lavc_misc
    /// 
    /// @{
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct FFTComplex
    {
        [FieldOffset(0)]
        public float re;

        [FieldOffset(4)]
        public float im;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct FFTContext
    {
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct RDFTContext
    {
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct DCTContext
    {
    }

    public unsafe partial class libavcodec
    {
        /// <summary>
        /// Set up a complex FFT.
        /// @param nbits           log2 of the length of the input array
        /// @param inverse         if 0 perform the forward transform, if 1 perform
        /// the inverse
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_fft_init")]
        internal static extern FFTContext* av_fft_init(int nbits, int inverse);

        /// <summary>
        /// Do the permutation needed BEFORE calling ff_fft_calc().
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_fft_permute")]
        internal static extern void av_fft_permute(FFTContext* s, FFTComplex* z);

        /// <summary>
        /// Do a complex FFT with the parameters defined in av_fft_init(). The
        /// input data must be permuted before. No 1.0/sqrt(n) normalization is
        /// done.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_fft_calc")]
        internal static extern void av_fft_calc(FFTContext* s, FFTComplex* z);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_fft_end")]
        internal static extern void av_fft_end(FFTContext* s);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_mdct_init")]
        internal static extern FFTContext* av_mdct_init(int nbits, int inverse, double scale);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_imdct_calc")]
        internal static extern void av_imdct_calc(FFTContext* s, float* output, float* input);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_imdct_half")]
        internal static extern void av_imdct_half(FFTContext* s, float* output, float* input);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_mdct_calc")]
        internal static extern void av_mdct_calc(FFTContext* s, float* output, float* input);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_mdct_end")]
        internal static extern void av_mdct_end(FFTContext* s);

        /// <summary>
        /// Set up a real FFT.
        /// @param nbits           log2 of the length of the input array
        /// @param trans           the type of transform
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_rdft_init")]
        internal static extern RDFTContext* av_rdft_init(int nbits, RDFTransformType trans);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_rdft_calc")]
        internal static extern void av_rdft_calc(RDFTContext* s, float* data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_rdft_end")]
        internal static extern void av_rdft_end(RDFTContext* s);

        /// <summary>
        /// Set up DCT.
        /// @param nbits           size of the input array:
        /// (1 << nbits)     for DCT-II, DCT-III and DST-I
        /// (1 << nbits) + 1 for DCT-I
        /// 
        /// @note the first element of the input of DST-I is ignored
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_dct_init")]
        internal static extern DCTContext* av_dct_init(int nbits, DCTTransformType type);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_dct_calc")]
        internal static extern void av_dct_calc(DCTContext* s, float* data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("avcodec-if-55.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_dct_end")]
        internal static extern void av_dct_end(DCTContext* s);
    }
}
