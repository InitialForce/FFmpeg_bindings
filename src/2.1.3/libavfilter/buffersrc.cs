//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using FFmpeg;

namespace FFmpeg
{
    public unsafe static partial class libavfilter
    {
        [Flags]
        public enum AV_BUFFERSRC_FLAG
        {
            /// <summary>Do not check for format changes.</summary>
            AV_BUFFERSRC_FLAG_NO_CHECK_FORMAT = 1,
            /// <summary>Ignored</summary>
            AV_BUFFERSRC_FLAG_NO_COPY = 2,
            /// <summary>Immediately push the frame to the output.</summary>
            AV_BUFFERSRC_FLAG_PUSH = 4,
            /// <summary>Keep a reference to the frame. If the frame if reference-counted, create a new reference; otherwise copy the frame data.</summary>
            AV_BUFFERSRC_FLAG_KEEP_REF = 8
        }

        /// <summary>
        /// Add buffer data in picref to buffer_src.
        /// </summary>
        /// <param name="buffer_src">
        /// pointer to a buffer source context
        /// </param>
        /// <param name="picref">
        /// a buffer reference, or NULL to mark EOF
        /// </param>
        /// <param name="flags">
        /// a combination of AV_BUFFERSRC_FLAG_
        /// </param>
        /// <returns>
        /// >= 0 in case of success, a negative AVERROR code
        /// in case of failure
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVFILTER_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_buffersrc_add_ref")]
        public static extern int av_buffersrc_add_ref(libavfilter.AVFilterContext* buffer_src, libavfilter.AVFilterBufferRef* picref, int flags);

        /// <summary>
        /// Get the number of failed requests.
        /// 
        /// A failed request is when the request_frame method is called while no
        /// frame is present in the buffer.
        /// The number is reset when a frame is added.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVFILTER_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_buffersrc_get_nb_failed_requests")]
        public static extern uint av_buffersrc_get_nb_failed_requests(libavfilter.AVFilterContext* buffer_src);

        /// <summary>
        /// Add a buffer to the filtergraph s.
        /// </summary>
        /// <param name="buf">
        /// buffer containing frame data to be passed down the filtergraph.
        /// This function will take ownership of buf, the user must not free it.
        /// A NULL buf signals EOF -- i.e. no more frames will be sent to this
        /// filter.
        /// 
        /// @deprecated use av_buffersrc_write_frame() or av_buffersrc_add_frame()
        /// </param>
        [System.ObsoleteAttribute()]
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVFILTER_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_buffersrc_buffer")]
        public static extern int av_buffersrc_buffer(libavfilter.AVFilterContext* s, libavfilter.AVFilterBufferRef* buf);

        /// <summary>
        /// Add a frame to the buffer source.
        /// </summary>
        /// <param name="s">
        /// an instance of the buffersrc filter.
        /// </param>
        /// <param name="frame">
        /// frame to be added. If the frame is reference counted, this
        /// function will make a new reference to it. Otherwise the frame data will
        /// be
        /// copied.
        /// </param>
        /// <returns>
        /// 0 on success, a negative AVERROR on error
        /// 
        /// This function is equivalent to av_buffersrc_add_frame_flags() with the
        /// AV_BUFFERSRC_FLAG_KEEP_REF flag.
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVFILTER_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_buffersrc_write_frame")]
        public static extern int av_buffersrc_write_frame(libavfilter.AVFilterContext* s, libavutil.AVFrame* frame);

        /// <summary>
        /// Add a frame to the buffer source.
        /// </summary>
        /// <param name="s">
        /// an instance of the buffersrc filter.
        /// </param>
        /// <param name="frame">
        /// frame to be added. If the frame is reference counted, this
        /// function will take ownership of the reference(s) and reset the frame.
        /// Otherwise the frame data will be copied. If this function returns an
        /// error,
        /// the input frame is not touched.
        /// </param>
        /// <returns>
        /// 0 on success, a negative AVERROR on error.
        /// </returns>
        /// <remark>
        /// the difference between this function and av_buffersrc_write_frame() is
        /// that av_buffersrc_write_frame() creates a new reference to the input
        /// frame,
        /// while this function takes ownership of the reference passed to it.
        /// 
        /// This function is equivalent to av_buffersrc_add_frame_flags() without
        /// the
        /// AV_BUFFERSRC_FLAG_KEEP_REF flag.
        /// </remark>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVFILTER_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_buffersrc_add_frame")]
        public static extern int av_buffersrc_add_frame(libavfilter.AVFilterContext* ctx, libavutil.AVFrame* frame);

        /// <summary>
        /// Add a frame to the buffer source.
        /// 
        /// By default, if the frame is reference-counted, this function will take
        /// ownership of the reference(s) and reset the frame. This can be
        /// controled
        /// using the flags.
        /// 
        /// If this function returns an error, the input frame is not touched.
        /// </summary>
        /// <param name="buffer_src">
        /// pointer to a buffer source context
        /// </param>
        /// <param name="frame">
        /// a frame, or NULL to mark EOF
        /// </param>
        /// <param name="flags">
        /// a combination of AV_BUFFERSRC_FLAG_
        /// </param>
        /// <returns>
        /// >= 0 in case of success, a negative AVERROR code
        /// in case of failure
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVFILTER_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_buffersrc_add_frame_flags")]
        public static extern int av_buffersrc_add_frame_flags(libavfilter.AVFilterContext* buffer_src, libavutil.AVFrame* frame, int flags);
    }
}
