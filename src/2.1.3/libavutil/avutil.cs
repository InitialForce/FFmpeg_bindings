//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    public unsafe static partial class libavutil
    {
        public const sbyte FF_LAMBDA_SHIFT = 7;

        public const sbyte FF_QP2LAMBDA = 118;

        public const int AV_TIME_BASE = 1000000;

        /// <summary>
        /// @addtogroup lavu_media Media Type
        /// @brief Media Type
        /// </summary>
        public enum AVMediaType
        {
            /// <summary>Usually treated as AVMEDIA_TYPE_DATA</summary>
            AVMEDIA_TYPE_UNKNOWN = -1,
            AVMEDIA_TYPE_VIDEO = 0,
            AVMEDIA_TYPE_AUDIO = 1,
            /// <summary>Opaque data information usually continuous</summary>
            AVMEDIA_TYPE_DATA = 2,
            AVMEDIA_TYPE_SUBTITLE = 3,
            /// <summary>Opaque data information usually sparse</summary>
            AVMEDIA_TYPE_ATTACHMENT = 4,
            AVMEDIA_TYPE_NB = 5
        }

        /// <summary>
        /// @}
        /// @}
        /// @defgroup lavu_picture Image related
        /// 
        /// AVPicture types, pixel formats and basic image planes manipulation.
        /// 
        /// @{
        /// </summary>
        public enum AVPictureType
        {
            /// <summary>Undefined</summary>
            AV_PICTURE_TYPE_NONE = 0,
            /// <summary>Intra</summary>
            AV_PICTURE_TYPE_I = 1,
            /// <summary>Predicted</summary>
            AV_PICTURE_TYPE_P = 2,
            /// <summary>Bi-dir predicted</summary>
            AV_PICTURE_TYPE_B = 3,
            /// <summary>S(GMC)-VOP MPEG4</summary>
            AV_PICTURE_TYPE_S = 4,
            /// <summary>Switching Intra</summary>
            AV_PICTURE_TYPE_SI = 5,
            /// <summary>Switching Predicted</summary>
            AV_PICTURE_TYPE_SP = 6,
            /// <summary>BI type</summary>
            AV_PICTURE_TYPE_BI = 7
        }

        /// <summary>
        /// Return the LIBAVUTIL_VERSION_INT constant.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avutil_version")]
        public static extern uint avutil_version();

        /// <summary>
        /// Return the libavutil build-time configuration.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avutil_configuration")]
        public static extern sbyte* avutil_configuration();

        /// <summary>
        /// Return the libavutil license.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avutil_license")]
        public static extern sbyte* avutil_license();

        /// <summary>
        /// Return a string describing the media_type enum, NULL if media_type
        /// is unknown.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_get_media_type_string")]
        public static extern sbyte* av_get_media_type_string(libavutil.AVMediaType media_type);

        /// <summary>
        /// Return a single letter to describe the given picture type
        /// pict_type.
        /// 
        /// @param[in] pict_type the picture type @return a single character
        /// representing the picture type, '?' if pict_type is unknown
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_get_picture_type_char")]
        public static extern sbyte av_get_picture_type_char(libavutil.AVPictureType pict_type);

        /// <summary>
        /// Return x default pointer in case p is NULL.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_x_if_null")]
        public static extern void* av_x_if_null(void* p, void* x);

        /// <summary>
        /// Compute the length of an integer list.
        /// 
        /// @param elsize  size in bytes of each list element (only 1, 2, 4 or 8)
        /// @param term    list terminator (usually 0 or -1)
        /// @param list    pointer to the list
        /// @return  length of the list, in elements, not counting the terminator
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_int_list_length_for_size")]
        public static extern uint av_int_list_length_for_size(uint elsize, void* list, ulong term);
    }
}
