//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace libavutil
{
    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct AVDictionary
    {
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct AVDictionaryEntry
    {
        [FieldOffset(0)]
        public sbyte* key;

        [FieldOffset(4)]
        public sbyte* value;
    }

    public unsafe partial class libavutil
    {
        /// <summary>
        /// Get a dictionary entry with matching key.
        /// 
        /// @param prev Set to the previous matching element to find the next.
        /// If set to NULL the first matching element is returned.
        /// @param flags Allows case as well as suffix-insensitive comparisons.
        /// @return Found entry or NULL, changing key or value leads to undefined
        /// behavior.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_dict_get")]
        internal static extern AVDictionaryEntry* av_dict_get(AVDictionary* m, global::System.IntPtr key, AVDictionaryEntry* prev, int flags);

        /// <summary>
        /// Get number of entries in dictionary.
        /// 
        /// @param m dictionary
        /// @return  number of entries in dictionary
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_dict_count")]
        internal static extern int av_dict_count(AVDictionary* m);

        /// <summary>
        /// Set the given entry in *pm, overwriting an existing entry.
        /// 
        /// @param pm pointer to a pointer to a dictionary struct. If *pm is NULL
        /// a dictionary struct is allocated and put in *pm.
        /// @param key entry key to add to *pm (will be av_strduped depending on
        /// flags)
        /// @param value entry value to add to *pm (will be av_strduped depending
        /// on flags).
        /// Passing a NULL value will cause an existing entry to be deleted.
        /// @return >= 0 on success otherwise an error code <0
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_dict_set")]
        internal static extern int av_dict_set(AVDictionary* pm, global::System.IntPtr key, global::System.IntPtr value, int flags);

        /// <summary>
        /// Parse the key/value pairs list and add to a dictionary.
        /// 
        /// @param key_val_sep  a 0-terminated list of characters used to separate
        /// key from value
        /// @param pairs_sep    a 0-terminated list of characters used to separate
        /// two pairs from each other
        /// @param flags        flags to use when adding to dictionary.
        /// AV_DICT_DONT_STRDUP_KEY and AV_DICT_DONT_STRDUP_VAL
        /// are ignored since the key/value tokens will always
        /// be duplicated.
        /// @return             0 on success, negative AVERROR code on failure
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_dict_parse_string")]
        internal static extern int av_dict_parse_string(AVDictionary* pm, global::System.IntPtr str, global::System.IntPtr key_val_sep, global::System.IntPtr pairs_sep, int flags);

        /// <summary>
        /// Copy entries from one AVDictionary struct into another.
        /// @param dst pointer to a pointer to a AVDictionary struct. If *dst is
        /// NULL,
        /// this function will allocate a struct for you and put it in *dst
        /// @param src pointer to source AVDictionary struct
        /// @param flags flags to use when setting entries in *dst
        /// @note metadata is read using the AV_DICT_IGNORE_SUFFIX flag
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_dict_copy")]
        internal static extern void av_dict_copy(AVDictionary* dst, AVDictionary* src, int flags);

        /// <summary>
        /// Free all the memory allocated for an AVDictionary struct
        /// and all keys and values.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_dict_free")]
        internal static extern void av_dict_free(AVDictionary* m);
    }
}
