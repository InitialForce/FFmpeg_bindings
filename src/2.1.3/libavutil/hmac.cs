//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    public unsafe static partial class libavutil
    {
        /// <summary>
        /// @defgroup lavu_hmac HMAC
        /// @ingroup lavu_crypto
        /// @{
        /// </summary>
        public enum AVHMACType
        {
            AV_HMAC_MD5 = 0,
            AV_HMAC_SHA1 = 1,
            AV_HMAC_SHA224 = 10,
            AV_HMAC_SHA256 = 11,
            AV_HMAC_SHA384 = 12,
            AV_HMAC_SHA512 = 13
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVHMAC
        {
        }

        /// <summary>
        /// Allocate an AVHMAC context.
        /// @param type The hash function used for the HMAC.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hmac_alloc")]
        public static extern libavutil.AVHMAC* av_hmac_alloc(libavutil.AVHMACType type);

        /// <summary>
        /// Free an AVHMAC context.
        /// @param ctx The context to free, may be NULL
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hmac_free")]
        public static extern void av_hmac_free(libavutil.AVHMAC* ctx);

        /// <summary>
        /// Initialize an AVHMAC context with an authentication key.
        /// @param ctx    The HMAC context
        /// @param key    The authentication key
        /// @param keylen The length of the key, in bytes
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hmac_init")]
        public static extern void av_hmac_init(libavutil.AVHMAC* ctx, byte* key, uint keylen);

        /// <summary>
        /// Hash data with the HMAC.
        /// @param ctx  The HMAC context
        /// @param data The data to hash
        /// @param len  The length of the data, in bytes
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hmac_update")]
        public static extern void av_hmac_update(libavutil.AVHMAC* ctx, byte* data, uint len);

        /// <summary>
        /// Finish hashing and output the HMAC digest.
        /// @param ctx    The HMAC context
        /// @param out    The output buffer to write the digest into
        /// @param outlen The length of the out buffer, in bytes
        /// @return       The number of bytes written to out, or a negative error
        /// code.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hmac_final")]
        public static extern int av_hmac_final(libavutil.AVHMAC* ctx, byte* _out, uint outlen);

        /// <summary>
        /// Hash an array of data with a key.
        /// @param ctx    The HMAC context
        /// @param data   The data to hash
        /// @param len    The length of the data, in bytes
        /// @param key    The authentication key
        /// @param keylen The length of the key, in bytes
        /// @param out    The output buffer to write the digest into
        /// @param outlen The length of the out buffer, in bytes
        /// @return       The number of bytes written to out, or a negative error
        /// code.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hmac_calc")]
        public static extern int av_hmac_calc(libavutil.AVHMAC* ctx, byte* data, uint len, byte* key, uint keylen, byte* _out, uint outlen);
    }
}
