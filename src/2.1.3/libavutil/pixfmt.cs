//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    public unsafe static partial class libavutil
    {
        public const short AVPALETTE_SIZE = 1024;

        public const short AVPALETTE_COUNT = 256;

        /// <summary>
        /// Pixel format.
        /// 
        /// @note
        /// AV_PIX_FMT_RGB32 is handled in an endian-specific manner. An RGBA
        /// color is put together as:
        /// (A << 24) | (R << 16) | (G << 8) | B
        /// This is stored as BGRA on little-endian CPU architectures and ARGB on
        /// big-endian CPUs.
        /// 
        /// @par
        /// When the pixel format is palettized RGB (AV_PIX_FMT_PAL8), the
        /// palettized
        /// image data is stored in AVFrame.data[0]. The palette is transported in
        /// AVFrame.data[1], is 1024 bytes long (256 4-byte entries) and is
        /// formatted the same as in AV_PIX_FMT_RGB32 described above (i.e., it is
        /// also endian-specific). Note also that the individual RGB palette
        /// components stored in AVFrame.data[1] should be in the range 0..255.
        /// This is important as many custom PAL8 video codecs that were designed
        /// to run on the IBM VGA graphics adapter use 6-bit palette components.
        /// 
        /// @par
        /// For all the 8bit per pixel formats, an RGB32 palette is in data[1] like
        /// for pal8. This palette is filled in automatically by the function
        /// allocating the picture.
        /// 
        /// @note
        /// Make sure that all newly added big-endian formats have (pix_fmt & 1) ==
        /// 1
        /// and that all newly added little-endian formats have (pix_fmt & 1) == 0.
        /// This allows simpler detection of big vs little-endian.
        /// </summary>
        public enum AVPixelFormat
        {
            AV_PIX_FMT_NONE = -1,
            /// <summary>planar YUV 4:2:0, 12bpp, (1 Cr & Cb sample per 2x2 Y samples)</summary>
            AV_PIX_FMT_YUV420P = 0,
            /// <summary>packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr</summary>
            AV_PIX_FMT_YUYV422 = 1,
            /// <summary>packed RGB 8:8:8, 24bpp, RGBRGB...</summary>
            AV_PIX_FMT_RGB24 = 2,
            /// <summary>packed RGB 8:8:8, 24bpp, BGRBGR...</summary>
            AV_PIX_FMT_BGR24 = 3,
            /// <summary>planar YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples)</summary>
            AV_PIX_FMT_YUV422P = 4,
            /// <summary>planar YUV 4:4:4, 24bpp, (1 Cr & Cb sample per 1x1 Y samples)</summary>
            AV_PIX_FMT_YUV444P = 5,
            /// <summary>planar YUV 4:1:0, 9bpp, (1 Cr & Cb sample per 4x4 Y samples)</summary>
            AV_PIX_FMT_YUV410P = 6,
            /// <summary>planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples)</summary>
            AV_PIX_FMT_YUV411P = 7,
            /// <summary>Y , 8bpp</summary>
            AV_PIX_FMT_GRAY8 = 8,
            /// <summary>Y , 1bpp, 0 is white, 1 is black, in each byte pixels are ordered from the msb to the lsb</summary>
            AV_PIX_FMT_MONOWHITE = 9,
            /// <summary>Y , 1bpp, 0 is black, 1 is white, in each byte pixels are ordered from the msb to the lsb</summary>
            AV_PIX_FMT_MONOBLACK = 10,
            /// <summary>8 bit with PIX_FMT_RGB32 palette</summary>
            AV_PIX_FMT_PAL8 = 11,
            /// <summary>planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV420P and setting color_range</summary>
            AV_PIX_FMT_YUVJ420P = 12,
            /// <summary>planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV422P and setting color_range</summary>
            AV_PIX_FMT_YUVJ422P = 13,
            /// <summary>planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV444P and setting color_range</summary>
            AV_PIX_FMT_YUVJ444P = 14,
            /// <summary>XVideo Motion Acceleration via common packet passing</summary>
            AV_PIX_FMT_XVMC_MPEG2_MC = 15,
            AV_PIX_FMT_XVMC_MPEG2_IDCT = 16,
            /// <summary>packed YUV 4:2:2, 16bpp, Cb Y0 Cr Y1</summary>
            AV_PIX_FMT_UYVY422 = 17,
            /// <summary>packed YUV 4:1:1, 12bpp, Cb Y0 Y1 Cr Y2 Y3</summary>
            AV_PIX_FMT_UYYVYY411 = 18,
            /// <summary>packed RGB 3:3:2, 8bpp, (msb)2B 3G 3R(lsb)</summary>
            AV_PIX_FMT_BGR8 = 19,
            /// <summary>packed RGB 1:2:1 bitstream, 4bpp, (msb)1B 2G 1R(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits</summary>
            AV_PIX_FMT_BGR4 = 20,
            /// <summary>packed RGB 1:2:1, 8bpp, (msb)1B 2G 1R(lsb)</summary>
            AV_PIX_FMT_BGR4_BYTE = 21,
            /// <summary>packed RGB 3:3:2, 8bpp, (msb)2R 3G 3B(lsb)</summary>
            AV_PIX_FMT_RGB8 = 22,
            /// <summary>packed RGB 1:2:1 bitstream, 4bpp, (msb)1R 2G 1B(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits</summary>
            AV_PIX_FMT_RGB4 = 23,
            /// <summary>packed RGB 1:2:1, 8bpp, (msb)1R 2G 1B(lsb)</summary>
            AV_PIX_FMT_RGB4_BYTE = 24,
            /// <summary>planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved (first byte U and the following byte V)</summary>
            AV_PIX_FMT_NV12 = 25,
            /// <summary>as above, but U and V bytes are swapped</summary>
            AV_PIX_FMT_NV21 = 26,
            /// <summary>packed ARGB 8:8:8:8, 32bpp, ARGBARGB...</summary>
            AV_PIX_FMT_ARGB = 27,
            /// <summary>packed RGBA 8:8:8:8, 32bpp, RGBARGBA...</summary>
            AV_PIX_FMT_RGBA = 28,
            /// <summary>packed ABGR 8:8:8:8, 32bpp, ABGRABGR...</summary>
            AV_PIX_FMT_ABGR = 29,
            /// <summary>packed BGRA 8:8:8:8, 32bpp, BGRABGRA...</summary>
            AV_PIX_FMT_BGRA = 30,
            /// <summary>Y , 16bpp, big-endian</summary>
            AV_PIX_FMT_GRAY16BE = 31,
            /// <summary>Y , 16bpp, little-endian</summary>
            AV_PIX_FMT_GRAY16LE = 32,
            /// <summary>planar YUV 4:4:0 (1 Cr & Cb sample per 1x2 Y samples)</summary>
            AV_PIX_FMT_YUV440P = 33,
            /// <summary>planar YUV 4:4:0 full scale (JPEG), deprecated in favor of PIX_FMT_YUV440P and setting color_range</summary>
            AV_PIX_FMT_YUVJ440P = 34,
            /// <summary>planar YUV 4:2:0, 20bpp, (1 Cr & Cb sample per 2x2 Y & A samples)</summary>
            AV_PIX_FMT_YUVA420P = 35,
            /// <summary>H.264 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            AV_PIX_FMT_VDPAU_H264 = 36,
            /// <summary>MPEG-1 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            AV_PIX_FMT_VDPAU_MPEG1 = 37,
            /// <summary>MPEG-2 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            AV_PIX_FMT_VDPAU_MPEG2 = 38,
            /// <summary>WMV3 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            AV_PIX_FMT_VDPAU_WMV3 = 39,
            /// <summary>VC-1 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            AV_PIX_FMT_VDPAU_VC1 = 40,
            /// <summary>packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as big-endian</summary>
            AV_PIX_FMT_RGB48BE = 41,
            /// <summary>packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as little-endian</summary>
            AV_PIX_FMT_RGB48LE = 42,
            /// <summary>packed RGB 5:6:5, 16bpp, (msb) 5R 6G 5B(lsb), big-endian</summary>
            AV_PIX_FMT_RGB565BE = 43,
            /// <summary>packed RGB 5:6:5, 16bpp, (msb) 5R 6G 5B(lsb), little-endian</summary>
            AV_PIX_FMT_RGB565LE = 44,
            /// <summary>packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), big-endian, most significant bit to 0</summary>
            AV_PIX_FMT_RGB555BE = 45,
            /// <summary>packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), little-endian, most significant bit to 0</summary>
            AV_PIX_FMT_RGB555LE = 46,
            /// <summary>packed BGR 5:6:5, 16bpp, (msb) 5B 6G 5R(lsb), big-endian</summary>
            AV_PIX_FMT_BGR565BE = 47,
            /// <summary>packed BGR 5:6:5, 16bpp, (msb) 5B 6G 5R(lsb), little-endian</summary>
            AV_PIX_FMT_BGR565LE = 48,
            /// <summary>packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), big-endian, most significant bit to 1</summary>
            AV_PIX_FMT_BGR555BE = 49,
            /// <summary>packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), little-endian, most significant bit to 1</summary>
            AV_PIX_FMT_BGR555LE = 50,
            /// <summary>HW acceleration through VA API at motion compensation entry-point, Picture.data[3] contains a vaapi_render_state struct which contains macroblocks as well as various fields extracted from headers</summary>
            AV_PIX_FMT_VAAPI_MOCO = 51,
            /// <summary>HW acceleration through VA API at IDCT entry-point, Picture.data[3] contains a vaapi_render_state struct which contains fields extracted from headers</summary>
            AV_PIX_FMT_VAAPI_IDCT = 52,
            /// <summary>HW decoding through VA API, Picture.data[3] contains a vaapi_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            AV_PIX_FMT_VAAPI_VLD = 53,
            /// <summary>planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV420P16LE = 54,
            /// <summary>planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV420P16BE = 55,
            /// <summary>planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV422P16LE = 56,
            /// <summary>planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV422P16BE = 57,
            /// <summary>planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV444P16LE = 58,
            /// <summary>planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV444P16BE = 59,
            /// <summary>MPEG4 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            AV_PIX_FMT_VDPAU_MPEG4 = 60,
            /// <summary>HW decoding through DXVA2, Picture.data[3] contains a LPDIRECT3DSURFACE9 pointer</summary>
            AV_PIX_FMT_DXVA2_VLD = 61,
            /// <summary>packed RGB 4:4:4, 16bpp, (msb)4A 4R 4G 4B(lsb), little-endian, most significant bits to 0</summary>
            AV_PIX_FMT_RGB444LE = 62,
            /// <summary>packed RGB 4:4:4, 16bpp, (msb)4A 4R 4G 4B(lsb), big-endian, most significant bits to 0</summary>
            AV_PIX_FMT_RGB444BE = 63,
            /// <summary>packed BGR 4:4:4, 16bpp, (msb)4A 4B 4G 4R(lsb), little-endian, most significant bits to 1</summary>
            AV_PIX_FMT_BGR444LE = 64,
            /// <summary>packed BGR 4:4:4, 16bpp, (msb)4A 4B 4G 4R(lsb), big-endian, most significant bits to 1</summary>
            AV_PIX_FMT_BGR444BE = 65,
            /// <summary>8bit gray, 8bit alpha</summary>
            AV_PIX_FMT_GRAY8A = 66,
            /// <summary>packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as big-endian</summary>
            AV_PIX_FMT_BGR48BE = 67,
            /// <summary>packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as little-endian</summary>
            AV_PIX_FMT_BGR48LE = 68,
            /// <summary>planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV420P9BE = 69,
            /// <summary>planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV420P9LE = 70,
            /// <summary>planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV420P10BE = 71,
            /// <summary>planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV420P10LE = 72,
            /// <summary>planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV422P10BE = 73,
            /// <summary>planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV422P10LE = 74,
            /// <summary>planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV444P9BE = 75,
            /// <summary>planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV444P9LE = 76,
            /// <summary>planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV444P10BE = 77,
            /// <summary>planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV444P10LE = 78,
            /// <summary>planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV422P9BE = 79,
            /// <summary>planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV422P9LE = 80,
            /// <summary>hardware decoding through VDA</summary>
            AV_PIX_FMT_VDA_VLD = 81,
            /// <summary>planar GBR 4:4:4 24bpp</summary>
            AV_PIX_FMT_GBRP = 82,
            /// <summary>planar GBR 4:4:4 27bpp, big-endian</summary>
            AV_PIX_FMT_GBRP9BE = 83,
            /// <summary>planar GBR 4:4:4 27bpp, little-endian</summary>
            AV_PIX_FMT_GBRP9LE = 84,
            /// <summary>planar GBR 4:4:4 30bpp, big-endian</summary>
            AV_PIX_FMT_GBRP10BE = 85,
            /// <summary>planar GBR 4:4:4 30bpp, little-endian</summary>
            AV_PIX_FMT_GBRP10LE = 86,
            /// <summary>planar GBR 4:4:4 48bpp, big-endian</summary>
            AV_PIX_FMT_GBRP16BE = 87,
            /// <summary>planar GBR 4:4:4 48bpp, little-endian</summary>
            AV_PIX_FMT_GBRP16LE = 88,
            /// <summary>planar YUV 4:2:2 24bpp, (1 Cr & Cb sample per 2x1 Y & A samples)</summary>
            AV_PIX_FMT_YUVA422P_LIBAV = 89,
            /// <summary>planar YUV 4:4:4 32bpp, (1 Cr & Cb sample per 1x1 Y & A samples)</summary>
            AV_PIX_FMT_YUVA444P_LIBAV = 90,
            /// <summary>planar YUV 4:2:0 22.5bpp, (1 Cr & Cb sample per 2x2 Y & A samples), big-endian</summary>
            AV_PIX_FMT_YUVA420P9BE = 91,
            /// <summary>planar YUV 4:2:0 22.5bpp, (1 Cr & Cb sample per 2x2 Y & A samples), little-endian</summary>
            AV_PIX_FMT_YUVA420P9LE = 92,
            /// <summary>planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A samples), big-endian</summary>
            AV_PIX_FMT_YUVA422P9BE = 93,
            /// <summary>planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A samples), little-endian</summary>
            AV_PIX_FMT_YUVA422P9LE = 94,
            /// <summary>planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A samples), big-endian</summary>
            AV_PIX_FMT_YUVA444P9BE = 95,
            /// <summary>planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A samples), little-endian</summary>
            AV_PIX_FMT_YUVA444P9LE = 96,
            /// <summary>planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A samples, big-endian)</summary>
            AV_PIX_FMT_YUVA420P10BE = 97,
            /// <summary>planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A samples, little-endian)</summary>
            AV_PIX_FMT_YUVA420P10LE = 98,
            /// <summary>planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A samples, big-endian)</summary>
            AV_PIX_FMT_YUVA422P10BE = 99,
            /// <summary>planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A samples, little-endian)</summary>
            AV_PIX_FMT_YUVA422P10LE = 100,
            /// <summary>planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A samples, big-endian)</summary>
            AV_PIX_FMT_YUVA444P10BE = 101,
            /// <summary>planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A samples, little-endian)</summary>
            AV_PIX_FMT_YUVA444P10LE = 102,
            /// <summary>planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A samples, big-endian)</summary>
            AV_PIX_FMT_YUVA420P16BE = 103,
            /// <summary>planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A samples, little-endian)</summary>
            AV_PIX_FMT_YUVA420P16LE = 104,
            /// <summary>planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A samples, big-endian)</summary>
            AV_PIX_FMT_YUVA422P16BE = 105,
            /// <summary>planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A samples, little-endian)</summary>
            AV_PIX_FMT_YUVA422P16LE = 106,
            /// <summary>planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A samples, big-endian)</summary>
            AV_PIX_FMT_YUVA444P16BE = 107,
            /// <summary>planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A samples, little-endian)</summary>
            AV_PIX_FMT_YUVA444P16LE = 108,
            /// <summary>HW acceleration through VDPAU, Picture.data[3] contains a VdpVideoSurface</summary>
            AV_PIX_FMT_VDPAU = 109,
            /// <summary>packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-byte value for each X/Y/Z is stored as little-endian, the 4 lower bits are set to 0</summary>
            AV_PIX_FMT_XYZ12LE = 110,
            /// <summary>packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-byte value for each X/Y/Z is stored as big-endian, the 4 lower bits are set to 0</summary>
            AV_PIX_FMT_XYZ12BE = 111,
            /// <summary>interleaved chroma YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples)</summary>
            AV_PIX_FMT_NV16 = 112,
            /// <summary>interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            AV_PIX_FMT_NV20LE = 113,
            /// <summary>interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            AV_PIX_FMT_NV20BE = 114,
            /// <summary>packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian</summary>
            AV_PIX_FMT_RGBA64BE = 291,
            /// <summary>packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian</summary>
            AV_PIX_FMT_RGBA64LE = 292,
            /// <summary>packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian</summary>
            AV_PIX_FMT_BGRA64BE = 293,
            /// <summary>packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian</summary>
            AV_PIX_FMT_BGRA64LE = 294,
            /// <summary>packed RGB 8:8:8, 32bpp, 0RGB0RGB...</summary>
            AV_PIX_FMT_0RGB = 295,
            /// <summary>packed RGB 8:8:8, 32bpp, RGB0RGB0...</summary>
            AV_PIX_FMT_RGB0 = 296,
            /// <summary>packed BGR 8:8:8, 32bpp, 0BGR0BGR...</summary>
            AV_PIX_FMT_0BGR = 297,
            /// <summary>packed BGR 8:8:8, 32bpp, BGR0BGR0...</summary>
            AV_PIX_FMT_BGR0 = 298,
            /// <summary>planar YUV 4:4:4 32bpp, (1 Cr & Cb sample per 1x1 Y & A samples)</summary>
            AV_PIX_FMT_YUVA444P = 299,
            /// <summary>planar YUV 4:2:2 24bpp, (1 Cr & Cb sample per 2x1 Y & A samples)</summary>
            AV_PIX_FMT_YUVA422P = 300,
            /// <summary>planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV420P12BE = 301,
            /// <summary>planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV420P12LE = 302,
            /// <summary>planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV420P14BE = 303,
            /// <summary>planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV420P14LE = 304,
            /// <summary>planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV422P12BE = 305,
            /// <summary>planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV422P12LE = 306,
            /// <summary>planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV422P14BE = 307,
            /// <summary>planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV422P14LE = 308,
            /// <summary>planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV444P12BE = 309,
            /// <summary>planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV444P12LE = 310,
            /// <summary>planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            AV_PIX_FMT_YUV444P14BE = 311,
            /// <summary>planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            AV_PIX_FMT_YUV444P14LE = 312,
            /// <summary>planar GBR 4:4:4 36bpp, big-endian</summary>
            AV_PIX_FMT_GBRP12BE = 313,
            /// <summary>planar GBR 4:4:4 36bpp, little-endian</summary>
            AV_PIX_FMT_GBRP12LE = 314,
            /// <summary>planar GBR 4:4:4 42bpp, big-endian</summary>
            AV_PIX_FMT_GBRP14BE = 315,
            /// <summary>planar GBR 4:4:4 42bpp, little-endian</summary>
            AV_PIX_FMT_GBRP14LE = 316,
            /// <summary>planar GBRA 4:4:4:4 32bpp</summary>
            AV_PIX_FMT_GBRAP = 317,
            /// <summary>planar GBRA 4:4:4:4 64bpp, big-endian</summary>
            AV_PIX_FMT_GBRAP16BE = 318,
            /// <summary>planar GBRA 4:4:4:4 64bpp, little-endian</summary>
            AV_PIX_FMT_GBRAP16LE = 319,
            /// <summary>planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples) full scale (JPEG), deprecated in favor of PIX_FMT_YUV411P and setting color_range</summary>
            AV_PIX_FMT_YUVJ411P = 320,
            /// <summary>bayer, BGBG..(odd line), GRGR..(even line), 8-bit samples */</summary>
            AV_PIX_FMT_BAYER_BGGR8 = 321,
            /// <summary>bayer, RGRG..(odd line), GBGB..(even line), 8-bit samples */</summary>
            AV_PIX_FMT_BAYER_RGGB8 = 322,
            /// <summary>bayer, GBGB..(odd line), RGRG..(even line), 8-bit samples */</summary>
            AV_PIX_FMT_BAYER_GBRG8 = 323,
            /// <summary>bayer, GRGR..(odd line), BGBG..(even line), 8-bit samples */</summary>
            AV_PIX_FMT_BAYER_GRBG8 = 324,
            /// <summary>bayer, BGBG..(odd line), GRGR..(even line), 16-bit samples, little-endian */</summary>
            AV_PIX_FMT_BAYER_BGGR16LE = 325,
            /// <summary>bayer, BGBG..(odd line), GRGR..(even line), 16-bit samples, big-endian */</summary>
            AV_PIX_FMT_BAYER_BGGR16BE = 326,
            /// <summary>bayer, RGRG..(odd line), GBGB..(even line), 16-bit samples, little-endian */</summary>
            AV_PIX_FMT_BAYER_RGGB16LE = 327,
            /// <summary>bayer, RGRG..(odd line), GBGB..(even line), 16-bit samples, big-endian */</summary>
            AV_PIX_FMT_BAYER_RGGB16BE = 328,
            /// <summary>bayer, GBGB..(odd line), RGRG..(even line), 16-bit samples, little-endian */</summary>
            AV_PIX_FMT_BAYER_GBRG16LE = 329,
            /// <summary>bayer, GBGB..(odd line), RGRG..(even line), 16-bit samples, big-endian */</summary>
            AV_PIX_FMT_BAYER_GBRG16BE = 330,
            /// <summary>bayer, GRGR..(odd line), BGBG..(even line), 16-bit samples, little-endian */</summary>
            AV_PIX_FMT_BAYER_GRBG16LE = 331,
            /// <summary>bayer, GRGR..(odd line), BGBG..(even line), 16-bit samples, big-endian */</summary>
            AV_PIX_FMT_BAYER_GRBG16BE = 332,
            /// <summary>number of pixel formats, DO NOT USE THIS if you want to link with shared libav* because the number of formats might differ between versions</summary>
            AV_PIX_FMT_NB = 333,
            PIX_FMT_NONE = -1,
            /// <summary>planar YUV 4:2:0, 12bpp, (1 Cr & Cb sample per 2x2 Y samples)</summary>
            PIX_FMT_YUV420P = 0,
            /// <summary>packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr</summary>
            PIX_FMT_YUYV422 = 1,
            /// <summary>packed RGB 8:8:8, 24bpp, RGBRGB...</summary>
            PIX_FMT_RGB24 = 2,
            /// <summary>packed RGB 8:8:8, 24bpp, BGRBGR...</summary>
            PIX_FMT_BGR24 = 3,
            /// <summary>planar YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples)</summary>
            PIX_FMT_YUV422P = 4,
            /// <summary>planar YUV 4:4:4, 24bpp, (1 Cr & Cb sample per 1x1 Y samples)</summary>
            PIX_FMT_YUV444P = 5,
            /// <summary>planar YUV 4:1:0, 9bpp, (1 Cr & Cb sample per 4x4 Y samples)</summary>
            PIX_FMT_YUV410P = 6,
            /// <summary>planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples)</summary>
            PIX_FMT_YUV411P = 7,
            /// <summary>Y , 8bpp</summary>
            PIX_FMT_GRAY8 = 8,
            /// <summary>Y , 1bpp, 0 is white, 1 is black, in each byte pixels are ordered from the msb to the lsb</summary>
            PIX_FMT_MONOWHITE = 9,
            /// <summary>Y , 1bpp, 0 is black, 1 is white, in each byte pixels are ordered from the msb to the lsb</summary>
            PIX_FMT_MONOBLACK = 10,
            /// <summary>8 bit with PIX_FMT_RGB32 palette</summary>
            PIX_FMT_PAL8 = 11,
            /// <summary>planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV420P and setting color_range</summary>
            PIX_FMT_YUVJ420P = 12,
            /// <summary>planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV422P and setting color_range</summary>
            PIX_FMT_YUVJ422P = 13,
            /// <summary>planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV444P and setting color_range</summary>
            PIX_FMT_YUVJ444P = 14,
            /// <summary>XVideo Motion Acceleration via common packet passing</summary>
            PIX_FMT_XVMC_MPEG2_MC = 15,
            PIX_FMT_XVMC_MPEG2_IDCT = 16,
            /// <summary>packed YUV 4:2:2, 16bpp, Cb Y0 Cr Y1</summary>
            PIX_FMT_UYVY422 = 17,
            /// <summary>packed YUV 4:1:1, 12bpp, Cb Y0 Y1 Cr Y2 Y3</summary>
            PIX_FMT_UYYVYY411 = 18,
            /// <summary>packed RGB 3:3:2, 8bpp, (msb)2B 3G 3R(lsb)</summary>
            PIX_FMT_BGR8 = 19,
            /// <summary>packed RGB 1:2:1 bitstream, 4bpp, (msb)1B 2G 1R(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits</summary>
            PIX_FMT_BGR4 = 20,
            /// <summary>packed RGB 1:2:1, 8bpp, (msb)1B 2G 1R(lsb)</summary>
            PIX_FMT_BGR4_BYTE = 21,
            /// <summary>packed RGB 3:3:2, 8bpp, (msb)2R 3G 3B(lsb)</summary>
            PIX_FMT_RGB8 = 22,
            /// <summary>packed RGB 1:2:1 bitstream, 4bpp, (msb)1R 2G 1B(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits</summary>
            PIX_FMT_RGB4 = 23,
            /// <summary>packed RGB 1:2:1, 8bpp, (msb)1R 2G 1B(lsb)</summary>
            PIX_FMT_RGB4_BYTE = 24,
            /// <summary>planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved (first byte U and the following byte V)</summary>
            PIX_FMT_NV12 = 25,
            /// <summary>as above, but U and V bytes are swapped</summary>
            PIX_FMT_NV21 = 26,
            /// <summary>packed ARGB 8:8:8:8, 32bpp, ARGBARGB...</summary>
            PIX_FMT_ARGB = 27,
            /// <summary>packed RGBA 8:8:8:8, 32bpp, RGBARGBA...</summary>
            PIX_FMT_RGBA = 28,
            /// <summary>packed ABGR 8:8:8:8, 32bpp, ABGRABGR...</summary>
            PIX_FMT_ABGR = 29,
            /// <summary>packed BGRA 8:8:8:8, 32bpp, BGRABGRA...</summary>
            PIX_FMT_BGRA = 30,
            /// <summary>Y , 16bpp, big-endian</summary>
            PIX_FMT_GRAY16BE = 31,
            /// <summary>Y , 16bpp, little-endian</summary>
            PIX_FMT_GRAY16LE = 32,
            /// <summary>planar YUV 4:4:0 (1 Cr & Cb sample per 1x2 Y samples)</summary>
            PIX_FMT_YUV440P = 33,
            /// <summary>planar YUV 4:4:0 full scale (JPEG), deprecated in favor of PIX_FMT_YUV440P and setting color_range</summary>
            PIX_FMT_YUVJ440P = 34,
            /// <summary>planar YUV 4:2:0, 20bpp, (1 Cr & Cb sample per 2x2 Y & A samples)</summary>
            PIX_FMT_YUVA420P = 35,
            /// <summary>H.264 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            PIX_FMT_VDPAU_H264 = 36,
            /// <summary>MPEG-1 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            PIX_FMT_VDPAU_MPEG1 = 37,
            /// <summary>MPEG-2 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            PIX_FMT_VDPAU_MPEG2 = 38,
            /// <summary>WMV3 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            PIX_FMT_VDPAU_WMV3 = 39,
            /// <summary>VC-1 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            PIX_FMT_VDPAU_VC1 = 40,
            /// <summary>packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as big-endian</summary>
            PIX_FMT_RGB48BE = 41,
            /// <summary>packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as little-endian</summary>
            PIX_FMT_RGB48LE = 42,
            /// <summary>packed RGB 5:6:5, 16bpp, (msb) 5R 6G 5B(lsb), big-endian</summary>
            PIX_FMT_RGB565BE = 43,
            /// <summary>packed RGB 5:6:5, 16bpp, (msb) 5R 6G 5B(lsb), little-endian</summary>
            PIX_FMT_RGB565LE = 44,
            /// <summary>packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), big-endian, most significant bit to 0</summary>
            PIX_FMT_RGB555BE = 45,
            /// <summary>packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), little-endian, most significant bit to 0</summary>
            PIX_FMT_RGB555LE = 46,
            /// <summary>packed BGR 5:6:5, 16bpp, (msb) 5B 6G 5R(lsb), big-endian</summary>
            PIX_FMT_BGR565BE = 47,
            /// <summary>packed BGR 5:6:5, 16bpp, (msb) 5B 6G 5R(lsb), little-endian</summary>
            PIX_FMT_BGR565LE = 48,
            /// <summary>packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), big-endian, most significant bit to 1</summary>
            PIX_FMT_BGR555BE = 49,
            /// <summary>packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), little-endian, most significant bit to 1</summary>
            PIX_FMT_BGR555LE = 50,
            /// <summary>HW acceleration through VA API at motion compensation entry-point, Picture.data[3] contains a vaapi_render_state struct which contains macroblocks as well as various fields extracted from headers</summary>
            PIX_FMT_VAAPI_MOCO = 51,
            /// <summary>HW acceleration through VA API at IDCT entry-point, Picture.data[3] contains a vaapi_render_state struct which contains fields extracted from headers</summary>
            PIX_FMT_VAAPI_IDCT = 52,
            /// <summary>HW decoding through VA API, Picture.data[3] contains a vaapi_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            PIX_FMT_VAAPI_VLD = 53,
            /// <summary>planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            PIX_FMT_YUV420P16LE = 54,
            /// <summary>planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            PIX_FMT_YUV420P16BE = 55,
            /// <summary>planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            PIX_FMT_YUV422P16LE = 56,
            /// <summary>planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            PIX_FMT_YUV422P16BE = 57,
            /// <summary>planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            PIX_FMT_YUV444P16LE = 58,
            /// <summary>planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            PIX_FMT_YUV444P16BE = 59,
            /// <summary>MPEG4 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers</summary>
            PIX_FMT_VDPAU_MPEG4 = 60,
            /// <summary>HW decoding through DXVA2, Picture.data[3] contains a LPDIRECT3DSURFACE9 pointer</summary>
            PIX_FMT_DXVA2_VLD = 61,
            /// <summary>packed RGB 4:4:4, 16bpp, (msb)4A 4R 4G 4B(lsb), little-endian, most significant bits to 0</summary>
            PIX_FMT_RGB444LE = 62,
            /// <summary>packed RGB 4:4:4, 16bpp, (msb)4A 4R 4G 4B(lsb), big-endian, most significant bits to 0</summary>
            PIX_FMT_RGB444BE = 63,
            /// <summary>packed BGR 4:4:4, 16bpp, (msb)4A 4B 4G 4R(lsb), little-endian, most significant bits to 1</summary>
            PIX_FMT_BGR444LE = 64,
            /// <summary>packed BGR 4:4:4, 16bpp, (msb)4A 4B 4G 4R(lsb), big-endian, most significant bits to 1</summary>
            PIX_FMT_BGR444BE = 65,
            /// <summary>8bit gray, 8bit alpha</summary>
            PIX_FMT_GRAY8A = 66,
            /// <summary>packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as big-endian</summary>
            PIX_FMT_BGR48BE = 67,
            /// <summary>packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as little-endian</summary>
            PIX_FMT_BGR48LE = 68,
            /// <summary>planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            PIX_FMT_YUV420P9BE = 69,
            /// <summary>planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            PIX_FMT_YUV420P9LE = 70,
            /// <summary>planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            PIX_FMT_YUV420P10BE = 71,
            /// <summary>planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            PIX_FMT_YUV420P10LE = 72,
            /// <summary>planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            PIX_FMT_YUV422P10BE = 73,
            /// <summary>planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            PIX_FMT_YUV422P10LE = 74,
            /// <summary>planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            PIX_FMT_YUV444P9BE = 75,
            /// <summary>planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            PIX_FMT_YUV444P9LE = 76,
            /// <summary>planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            PIX_FMT_YUV444P10BE = 77,
            /// <summary>planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            PIX_FMT_YUV444P10LE = 78,
            /// <summary>planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            PIX_FMT_YUV422P9BE = 79,
            /// <summary>planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            PIX_FMT_YUV422P9LE = 80,
            /// <summary>hardware decoding through VDA</summary>
            PIX_FMT_VDA_VLD = 81,
            /// <summary>planar GBR 4:4:4 24bpp</summary>
            PIX_FMT_GBRP = 82,
            /// <summary>planar GBR 4:4:4 27bpp, big endian</summary>
            PIX_FMT_GBRP9BE = 83,
            /// <summary>planar GBR 4:4:4 27bpp, little endian</summary>
            PIX_FMT_GBRP9LE = 84,
            /// <summary>planar GBR 4:4:4 30bpp, big endian</summary>
            PIX_FMT_GBRP10BE = 85,
            /// <summary>planar GBR 4:4:4 30bpp, little endian</summary>
            PIX_FMT_GBRP10LE = 86,
            /// <summary>planar GBR 4:4:4 48bpp, big endian</summary>
            PIX_FMT_GBRP16BE = 87,
            /// <summary>planar GBR 4:4:4 48bpp, little endian</summary>
            PIX_FMT_GBRP16LE = 88,
            /// <summary>packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian</summary>
            PIX_FMT_RGBA64BE = 291,
            /// <summary>packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian</summary>
            PIX_FMT_RGBA64LE = 292,
            /// <summary>packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian</summary>
            PIX_FMT_BGRA64BE = 293,
            /// <summary>packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian</summary>
            PIX_FMT_BGRA64LE = 294,
            /// <summary>packed RGB 8:8:8, 32bpp, 0RGB0RGB...</summary>
            PIX_FMT_0RGB = 295,
            /// <summary>packed RGB 8:8:8, 32bpp, RGB0RGB0...</summary>
            PIX_FMT_RGB0 = 296,
            /// <summary>packed BGR 8:8:8, 32bpp, 0BGR0BGR...</summary>
            PIX_FMT_0BGR = 297,
            /// <summary>packed BGR 8:8:8, 32bpp, BGR0BGR0...</summary>
            PIX_FMT_BGR0 = 298,
            /// <summary>planar YUV 4:4:4 32bpp, (1 Cr & Cb sample per 1x1 Y & A samples)</summary>
            PIX_FMT_YUVA444P = 299,
            /// <summary>planar YUV 4:2:2 24bpp, (1 Cr & Cb sample per 2x1 Y & A samples)</summary>
            PIX_FMT_YUVA422P = 300,
            /// <summary>planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            PIX_FMT_YUV420P12BE = 301,
            /// <summary>planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            PIX_FMT_YUV420P12LE = 302,
            /// <summary>planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian</summary>
            PIX_FMT_YUV420P14BE = 303,
            /// <summary>planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian</summary>
            PIX_FMT_YUV420P14LE = 304,
            /// <summary>planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            PIX_FMT_YUV422P12BE = 305,
            /// <summary>planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            PIX_FMT_YUV422P12LE = 306,
            /// <summary>planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian</summary>
            PIX_FMT_YUV422P14BE = 307,
            /// <summary>planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian</summary>
            PIX_FMT_YUV422P14LE = 308,
            /// <summary>planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            PIX_FMT_YUV444P12BE = 309,
            /// <summary>planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            PIX_FMT_YUV444P12LE = 310,
            /// <summary>planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian</summary>
            PIX_FMT_YUV444P14BE = 311,
            /// <summary>planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian</summary>
            PIX_FMT_YUV444P14LE = 312,
            /// <summary>planar GBR 4:4:4 36bpp, big endian</summary>
            PIX_FMT_GBRP12BE = 313,
            /// <summary>planar GBR 4:4:4 36bpp, little endian</summary>
            PIX_FMT_GBRP12LE = 314,
            /// <summary>planar GBR 4:4:4 42bpp, big endian</summary>
            PIX_FMT_GBRP14BE = 315,
            /// <summary>planar GBR 4:4:4 42bpp, little endian</summary>
            PIX_FMT_GBRP14LE = 316,
            /// <summary>number of pixel formats, DO NOT USE THIS if you want to link with shared libav* because the number of formats might differ between versions</summary>
            PIX_FMT_NB = 317
        }
    }
}
