//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace libavutil
{
    /// <summary>
    /// rational number numerator/denominator
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct AVRational
    {
        /// <summary>
        /// < numerator
        /// </summary>
        [FieldOffset(0)]
        public int num;

        /// <summary>
        /// < denominator
        /// </summary>
        [FieldOffset(4)]
        public int den;
    }

    public unsafe partial class libavutil
    {
        /// <summary>
        /// Compare two rationals.
        /// @param a first rational
        /// @param b second rational
        /// @return 0 if a==b, 1 if a>b, -1 if a<b, and INT_MIN if one of the
        /// values is of the form 0/0
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_cmp_q")]
        internal static extern int av_cmp_q(AVRational* a, AVRational* b);

        /// <summary>
        /// Convert rational to double.
        /// @param a rational to convert
        /// @return (double) a
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_q2d")]
        internal static extern double av_q2d(AVRational* a);

        /// <summary>
        /// Reduce a fraction.
        /// This is useful for framerate calculations.
        /// @param dst_num destination numerator
        /// @param dst_den destination denominator
        /// @param num source numerator
        /// @param den source denominator
        /// @param max the maximum allowed for dst_num & dst_den
        /// @return 1 if exact, 0 otherwise
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_reduce")]
        internal static extern int av_reduce(int* dst_num, int* dst_den, long num, long den, long max);

        /// <summary>
        /// Multiply two rationals.
        /// @param b first rational
        /// @param c second rational
        /// @return b*c
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_mul_q")]
        internal static extern AVRational* av_mul_q(AVRational* b, AVRational* c);

        /// <summary>
        /// Divide one rational by another.
        /// @param b first rational
        /// @param c second rational
        /// @return b/c
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_div_q")]
        internal static extern AVRational* av_div_q(AVRational* b, AVRational* c);

        /// <summary>
        /// Add two rationals.
        /// @param b first rational
        /// @param c second rational
        /// @return b+c
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_add_q")]
        internal static extern AVRational* av_add_q(AVRational* b, AVRational* c);

        /// <summary>
        /// Subtract one rational from another.
        /// @param b first rational
        /// @param c second rational
        /// @return b-c
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_sub_q")]
        internal static extern AVRational* av_sub_q(AVRational* b, AVRational* c);

        /// <summary>
        /// Invert a rational.
        /// @param q value
        /// @return 1 / q
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_inv_q")]
        internal static extern AVRational* av_inv_q(AVRational* q);

        /// <summary>
        /// Convert a double precision floating point number to a rational.
        /// inf is expressed as {1,0} or {-1,0} depending on the sign.
        /// 
        /// @param d double to convert
        /// @param max the maximum allowed numerator and denominator
        /// @return (AVRational) d
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_d2q")]
        internal static extern AVRational* av_d2q(double d, int max);

        /// <summary>
        /// @return 1 if q1 is nearer to q than q2, -1 if q2 is nearer
        /// than q1, 0 if they have the same distance.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_nearer_q")]
        internal static extern int av_nearer_q(AVRational* q, AVRational* q1, AVRational* q2);

        /// <summary>
        /// Find the nearest value in q_list to q.
        /// @param q_list an array of rationals terminated by {0, 0}
        /// @return the index of the nearest value found in the array
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("avutil-if-52.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="av_find_nearest_q_idx")]
        internal static extern int av_find_nearest_q_idx(AVRational* q, AVRational* q_list);
    }
}
