//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace libswscale
{
    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct SwsVector
    {
        /// <summary>
        /// < pointer to the list of coefficients
        /// </summary>
        [FieldOffset(0)]
        public double* coeff;

        /// <summary>
        /// < number of coefficients in the vector
        /// </summary>
        [FieldOffset(4)]
        public int length;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct SwsFilter
    {
        [FieldOffset(0)]
        public SwsVector* lumH;

        [FieldOffset(4)]
        public SwsVector* lumV;

        [FieldOffset(8)]
        public SwsVector* chrH;

        [FieldOffset(12)]
        public SwsVector* chrV;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct SwsContext
    {
    }

    public unsafe partial class libswscale
    {
        /// <summary>
        /// Return the LIBSWSCALE_VERSION_INT constant.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="swscale_version")]
        internal static extern uint swscale_version();

        /// <summary>
        /// Return the libswscale build-time configuration.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="swscale_configuration")]
        internal static extern global::System.IntPtr swscale_configuration();

        /// <summary>
        /// Return the libswscale license.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="swscale_license")]
        internal static extern global::System.IntPtr swscale_license();

        /// <summary>
        /// Return a pointer to yuv<->rgb coefficients for the given colorspace
        /// suitable for sws_setColorspaceDetails().
        /// 
        /// @param colorspace One of the SWS_CS_* macros. If invalid,
        /// SWS_CS_DEFAULT is used.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_getCoefficients")]
        internal static extern int* sws_getCoefficients(int colorspace);

        /// <summary>
        /// Return a positive value if pix_fmt is a supported input format, 0
        /// otherwise.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_isSupportedInput")]
        internal static extern int sws_isSupportedInput(AVPixelFormat pix_fmt);

        /// <summary>
        /// Return a positive value if pix_fmt is a supported output format, 0
        /// otherwise.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_isSupportedOutput")]
        internal static extern int sws_isSupportedOutput(AVPixelFormat pix_fmt);

        /// <summary>
        /// @param[in]  pix_fmt the pixel format
        /// @return a positive value if an endianness conversion for pix_fmt is
        /// supported, 0 otherwise.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_isSupportedEndiannessConversion")]
        internal static extern int sws_isSupportedEndiannessConversion(AVPixelFormat pix_fmt);

        /// <summary>
        /// Allocate an empty SwsContext. This must be filled and passed to
        /// sws_init_context(). For filling see AVOptions, options.c and
        /// sws_setColorspaceDetails().
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_alloc_context")]
        internal static extern SwsContext* sws_alloc_context();

        /// <summary>
        /// Initialize the swscaler context sws_context.
        /// 
        /// @return zero or positive value on success, a negative value on
        /// error
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_init_context")]
        internal static extern int sws_init_context(SwsContext* sws_context, SwsFilter* srcFilter, SwsFilter* dstFilter);

        /// <summary>
        /// Free the swscaler context swsContext.
        /// If swsContext is NULL, then does nothing.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_freeContext")]
        internal static extern void sws_freeContext(SwsContext* swsContext);

        /// <summary>
        /// Allocate and return an SwsContext. You need it to perform
        /// scaling/conversion operations using sws_scale().
        /// 
        /// @param srcW the width of the source image
        /// @param srcH the height of the source image
        /// @param srcFormat the source image format
        /// @param dstW the width of the destination image
        /// @param dstH the height of the destination image
        /// @param dstFormat the destination image format
        /// @param flags specify which algorithm and options to use for rescaling
        /// @return a pointer to an allocated context, or NULL in case of error
        /// @note this function is to be removed after a saner alternative is
        /// written
        /// @deprecated Use sws_getCachedContext() instead.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_getContext")]
        internal static extern SwsContext* sws_getContext(int srcW, int srcH, AVPixelFormat srcFormat, int dstW, int dstH, AVPixelFormat dstFormat, int flags, SwsFilter* srcFilter, SwsFilter* dstFilter, double* param);

        /// <summary>
        /// Scale the image slice in srcSlice and put the resulting scaled
        /// slice in the image in dst. A slice is a sequence of consecutive
        /// rows in an image.
        /// 
        /// Slices have to be provided in sequential order, either in
        /// top-bottom or bottom-top order. If slices are provided in
        /// non-sequential order the behavior of the function is undefined.
        /// 
        /// @param c         the scaling context previously created with
        /// sws_getContext()
        /// @param srcSlice  the array containing the pointers to the planes of
        /// the source slice
        /// @param srcStride the array containing the strides for each plane of
        /// the source image
        /// @param srcSliceY the position in the source image of the slice to
        /// process, that is the number (counted starting from
        /// zero) in the image of the first row of the slice
        /// @param srcSliceH the height of the source slice, that is the number
        /// of rows in the slice
        /// @param dst       the array containing the pointers to the planes of
        /// the destination image
        /// @param dstStride the array containing the strides for each plane of
        /// the destination image
        /// @return          the height of the output slice
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_scale")]
        internal static extern int sws_scale(SwsContext* c, byte* srcSlice, int* srcStride, int srcSliceY, int srcSliceH, byte* dst, int* dstStride);

        /// <summary>
        /// @param dstRange flag indicating the while-black range of the output
        /// (1=jpeg / 0=mpeg)
        /// @param srcRange flag indicating the while-black range of the input
        /// (1=jpeg / 0=mpeg)
        /// @param table the yuv2rgb coefficients describing the output yuv space,
        /// normally ff_yuv2rgb_coeffs[x]
        /// @param inv_table the yuv2rgb coefficients describing the input yuv
        /// space, normally ff_yuv2rgb_coeffs[x]
        /// @param brightness 16.16 fixed point brightness correction
        /// @param contrast 16.16 fixed point contrast correction
        /// @param saturation 16.16 fixed point saturation correction
        /// @return -1 if not supported
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_setColorspaceDetails")]
        internal static extern int sws_setColorspaceDetails(SwsContext* c, int* inv_table, int srcRange, int* table, int dstRange, int brightness, int contrast, int saturation);

        /// <summary>
        /// @return -1 if not supported
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_getColorspaceDetails")]
        internal static extern int sws_getColorspaceDetails(SwsContext* c, int* inv_table, int* srcRange, int* table, int* dstRange, int* brightness, int* contrast, int* saturation);

        /// <summary>
        /// Allocate and return an uninitialized vector with length coefficients.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_allocVec")]
        internal static extern SwsVector* sws_allocVec(int length);

        /// <summary>
        /// Return a normalized Gaussian curve used to filter stuff
        /// quality = 3 is high quality, lower is lower quality.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_getGaussianVec")]
        internal static extern SwsVector* sws_getGaussianVec(double variance, double quality);

        /// <summary>
        /// Allocate and return a vector with length coefficients, all
        /// with the same value c.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_getConstVec")]
        internal static extern SwsVector* sws_getConstVec(double c, int length);

        /// <summary>
        /// Allocate and return a vector with just one coefficient, with
        /// value 1.0.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_getIdentityVec")]
        internal static extern SwsVector* sws_getIdentityVec();

        /// <summary>
        /// Scale all the coefficients of a by the scalar value.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_scaleVec")]
        internal static extern void sws_scaleVec(SwsVector* a, double scalar);

        /// <summary>
        /// Scale all the coefficients of a so that their sum equals height.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_normalizeVec")]
        internal static extern void sws_normalizeVec(SwsVector* a, double height);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_convVec")]
        internal static extern void sws_convVec(SwsVector* a, SwsVector* b);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_addVec")]
        internal static extern void sws_addVec(SwsVector* a, SwsVector* b);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_subVec")]
        internal static extern void sws_subVec(SwsVector* a, SwsVector* b);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_shiftVec")]
        internal static extern void sws_shiftVec(SwsVector* a, int shift);

        /// <summary>
        /// Allocate and return a clone of the vector a, that is a vector
        /// with the same coefficients as a.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_cloneVec")]
        internal static extern SwsVector* sws_cloneVec(SwsVector* a);

        /// <summary>
        /// Print with av_log() a textual representation of the vector a
        /// if log_level <= av_log_level.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_printVec2")]
        internal static extern void sws_printVec2(SwsVector* a, AVClass* log_ctx, int log_level);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_freeVec")]
        internal static extern void sws_freeVec(SwsVector* a);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_getDefaultFilter")]
        internal static extern SwsFilter* sws_getDefaultFilter(float lumaGBlur, float chromaGBlur, float lumaSharpen, float chromaSharpen, float chromaHShift, float chromaVShift, int verbose);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_freeFilter")]
        internal static extern void sws_freeFilter(SwsFilter* filter);

        /// <summary>
        /// Check if context can be reused, otherwise reallocate a new one.
        /// 
        /// If context is NULL, just calls sws_getContext() to get a new
        /// context. Otherwise, checks if the parameters are the ones already
        /// saved in context. If that is the case, returns the current
        /// context. Otherwise, frees context and gets a new context with
        /// the new parameters.
        /// 
        /// Be warned that srcFilter and dstFilter are not checked, they
        /// are assumed to remain the same.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_getCachedContext")]
        internal static extern SwsContext* sws_getCachedContext(SwsContext* context, int srcW, int srcH, AVPixelFormat srcFormat, int dstW, int dstH, AVPixelFormat dstFormat, int flags, SwsFilter* srcFilter, SwsFilter* dstFilter, double* param);

        /// <summary>
        /// Convert an 8-bit paletted frame into a frame with a color depth of 32
        /// bits.
        /// 
        /// The output frame will have the same packed format as the palette.
        /// 
        /// @param src        source frame buffer
        /// @param dst        destination frame buffer
        /// @param num_pixels number of pixels to convert
        /// @param palette    array with [256] entries, which must match color
        /// arrangement (RGB or BGR) of src
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_convertPalette8ToPacked32")]
        internal static extern void sws_convertPalette8ToPacked32(byte* src, byte* dst, int num_pixels, byte* palette);

        /// <summary>
        /// Convert an 8-bit paletted frame into a frame with a color depth of 24
        /// bits.
        /// 
        /// With the palette format "ABCD", the destination frame ends up with the
        /// format "ABC".
        /// 
        /// @param src        source frame buffer
        /// @param dst        destination frame buffer
        /// @param num_pixels number of pixels to convert
        /// @param palette    array with [256] entries, which must match color
        /// arrangement (RGB or BGR) of src
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_convertPalette8ToPacked24")]
        internal static extern void sws_convertPalette8ToPacked24(byte* src, byte* dst, int num_pixels, byte* palette);

        /// <summary>
        /// Get the AVClass for swsContext. It can be used in combination with
        /// AV_OPT_SEARCH_FAKE_OBJ for examining options.
        /// 
        /// @see av_opt_find().
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport("swscale-if-2.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            EntryPoint="sws_get_class")]
        internal static extern AVClass* sws_get_class();
    }
}
