//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    public unsafe static partial class libavdevice
    {
        /// <summary>
        /// Message types used by avdevice_app_to_dev_control_message().
        /// </summary>
        public enum AVAppToDevMessageType
        {
            /// <summary>Dummy message.</summary>
            AV_APP_TO_DEV_NONE = 1313820229,
            /// <summary>Window size change message.</summary>
            AV_APP_TO_DEV_WINDOW_SIZE = 1195724621,
            /// <summary>Repaint request message.</summary>
            AV_APP_TO_DEV_WINDOW_REPAINT = 1380274241
        }

        /// <summary>
        /// Message types used by avdevice_dev_to_app_control_message().
        /// </summary>
        public enum AVDevToAppMessageType
        {
            /// <summary>Dummy message.</summary>
            AV_DEV_TO_APP_NONE = 1313820229,
            /// <summary>Create window buffer message.</summary>
            AV_DEV_TO_APP_CREATE_WINDOW_BUFFER = 1111708229,
            /// <summary>Prepare window buffer message.</summary>
            AV_DEV_TO_APP_PREPARE_WINDOW_BUFFER = 1112560197,
            /// <summary>Display window buffer message.</summary>
            AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER = 1111771475,
            /// <summary>Destroy window buffer message.</summary>
            AV_DEV_TO_APP_DESTROY_WINDOW_BUFFER = 1111770451
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVDeviceRect
        {
            /// <summary>
            /// x coordinate of top left corner
            /// </summary>
            public int x;

            /// <summary>
            /// y coordinate of top left corner
            /// </summary>
            public int y;

            /// <summary>
            /// width
            /// </summary>
            public int width;

            /// <summary>
            /// height
            /// </summary>
            public int height;
        }

        /// <summary>
        /// Structure describes basic parameters of the device.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVDeviceInfo
        {
            /// <summary>
            /// device name, format depends on device
            /// </summary>
            public sbyte* device_name;

            /// <summary>
            /// human friendly name
            /// </summary>
            public sbyte* device_description;
        }

        /// <summary>
        /// List of devices.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVDeviceInfoList
        {
            /// <summary>
            /// list of autodetected devices
            /// </summary>
            public libavdevice.AVDeviceInfo** devices;

            /// <summary>
            /// number of autodetected devices
            /// </summary>
            public int nb_devices;

            /// <summary>
            /// index of default device or -1 if no default
            /// </summary>
            public int default_device;
        }

        /// <summary>
        /// Return the LIBAVDEVICE_VERSION_INT constant.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_version")]
        public static extern uint avdevice_version();

        /// <summary>
        /// Return the libavdevice build-time configuration.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_configuration")]
        public static extern sbyte* avdevice_configuration();

        /// <summary>
        /// Return the libavdevice license.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_license")]
        public static extern sbyte* avdevice_license();

        /// <summary>
        /// Initialize libavdevice and register all the input and output devices.
        /// @warning This function is not thread safe.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_register_all")]
        public static extern void avdevice_register_all();

        /// <summary>
        /// Send control message from application to device.
        /// 
        /// @param s         device context.
        /// @param type      message type.
        /// @param data      message data. Exact type depends on message type.
        /// @param data_size size of message data.
        /// @return >= 0 on success, negative on error.
        /// AVERROR(ENOSYS) when device doesn't implement handler of the message.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_app_to_dev_control_message")]
        public static extern int avdevice_app_to_dev_control_message(libavformat.AVFormatContext* s, libavdevice.AVAppToDevMessageType type, void* data, global::System.UIntPtr data_size);

        /// <summary>
        /// Send control message from device to application.
        /// 
        /// @param s         device context.
        /// @param type      message type.
        /// @param data      message data. Can be NULL.
        /// @param data_size size of message data.
        /// @return >= 0 on success, negative on error.
        /// AVERROR(ENOSYS) when application doesn't implement handler of the
        /// message.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_dev_to_app_control_message")]
        public static extern int avdevice_dev_to_app_control_message(libavformat.AVFormatContext* s, libavdevice.AVDevToAppMessageType type, void* data, global::System.UIntPtr data_size);

        /// <summary>
        /// List devices.
        /// 
        /// Returns available device names and their parameters.
        /// 
        /// @note: Some devices may accept system-dependent device names that
        /// cannot be
        /// autodetected. The list returned by this function cannot be assumed to
        /// be always completed.
        /// 
        /// @param s                device context.
        /// @param[out] device_list list of autodetected devices.
        /// @return count of autodetected devices, negative on error.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_list_devices")]
        public static extern int avdevice_list_devices(libavformat.AVFormatContext* s, libavdevice.AVDeviceInfoList** device_list);

        /// <summary>
        /// List devices.
        /// 
        /// Returns available device names and their parameters.
        /// 
        /// @note: Some devices may accept system-dependent device names that
        /// cannot be
        /// autodetected. The list returned by this function cannot be assumed to
        /// be always completed.
        /// 
        /// @param s                device context.
        /// @param[out] device_list list of autodetected devices.
        /// @return count of autodetected devices, negative on error.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_list_devices")]
        public static extern int avdevice_list_devices(libavformat.AVFormatContext* s, ref libavdevice.AVDeviceInfoList* device_list);

        /// <summary>
        /// Convinient function to free result of avdevice_list_devices().
        /// 
        /// @param devices device list to be freed.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_free_list_devices")]
        public static extern void avdevice_free_list_devices(libavdevice.AVDeviceInfoList** device_list);

        /// <summary>
        /// Convinient function to free result of avdevice_list_devices().
        /// 
        /// @param devices device list to be freed.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVDEVICE_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="avdevice_free_list_devices")]
        public static extern void avdevice_free_list_devices(ref libavdevice.AVDeviceInfoList* device_list);
    }
}
