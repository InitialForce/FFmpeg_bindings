//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    public unsafe static partial class libavutil
    {
        /// <summary>
        /// Possible downmix types.
        /// </summary>
        public enum AVDownmixType
        {
            /// <summary>Not indicated.</summary>
            AV_DOWNMIX_TYPE_UNKNOWN = 0,
            /// <summary>Lo/Ro 2-channel downmix (Stereo).</summary>
            AV_DOWNMIX_TYPE_LORO = 1,
            /// <summary>Lt/Rt 2-channel downmix, Dolby Surround compatible.</summary>
            AV_DOWNMIX_TYPE_LTRT = 2,
            /// <summary>Lt/Rt 2-channel downmix, Dolby Pro Logic II compatible.</summary>
            AV_DOWNMIX_TYPE_DPLII = 3,
            /// <summary>Number of downmix types. Not part of ABI.</summary>
            AV_DOWNMIX_TYPE_NB = 4
        }

        /// <summary>
        /// This structure describes optional metadata relevant to a downmix
        /// procedure.
        /// 
        /// All fields are set by the decoder to the value indicated in the audio
        /// bitstream (if present), or to a "sane" default otherwise.
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVDownmixInfo
        {
            /// <summary>
            /// Type of downmix preferred by the mastering engineer.
            /// </summary>
            public libavutil.AVDownmixType preferred_downmix_type;

            /// <summary>
            /// Absolute scale factor representing the nominal level of the center
            /// channel during a regular downmix.
            /// </summary>
            public double center_mix_level;

            /// <summary>
            /// Absolute scale factor representing the nominal level of the center
            /// channel during an Lt/Rt compatible downmix.
            /// </summary>
            public double center_mix_level_ltrt;

            /// <summary>
            /// Absolute scale factor representing the nominal level of the surround
            /// channels during a regular downmix.
            /// </summary>
            public double surround_mix_level;

            /// <summary>
            /// Absolute scale factor representing the nominal level of the surround
            /// channels during an Lt/Rt compatible downmix.
            /// </summary>
            public double surround_mix_level_ltrt;

            /// <summary>
            /// Absolute scale factor representing the level at which the LFE data is
            /// mixed into L/R channels during downmixing.
            /// </summary>
            public double lfe_mix_level;
        }

        /// <summary>
        /// Get a frame's AV_FRAME_DATA_DOWNMIX_INFO side data for editing.
        /// 
        /// The side data is created and added to the frame if it's absent.
        /// </summary>
        /// <param name="frame">
        /// the frame for which the side data is to be obtained.
        /// </param>
        /// <returns>
        /// the AVDownmixInfo structure to be edited by the caller.
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_downmix_info_update_side_data")]
        public static extern libavutil.AVDownmixInfo* av_downmix_info_update_side_data(libavutil.AVFrame* frame);
    }
}
