//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    public unsafe static partial class libavutil
    {
        public const sbyte AV_HASH_MAX_SIZE = 64;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVHashContext
        {
        }

        /// <summary>
        /// Allocate a hash context for the algorithm specified by name.
        /// </summary>
        /// <returns>
        /// >= 0 for success, a negative error code for failure
        /// </returns>
        /// <remark>
        /// The context is not initialized, you must call av_hash_init().
        /// </remark>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_alloc")]
        public static extern int av_hash_alloc(libavutil.AVHashContext** ctx, string name);

        /// <summary>
        /// Allocate a hash context for the algorithm specified by name.
        /// </summary>
        /// <returns>
        /// >= 0 for success, a negative error code for failure
        /// </returns>
        /// <remark>
        /// The context is not initialized, you must call av_hash_init().
        /// </remark>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_alloc")]
        public static extern int av_hash_alloc(ref libavutil.AVHashContext* ctx, string name);

        /// <summary>
        /// Get the names of available hash algorithms.
        /// 
        /// This function can be used to enumerate the algorithms.
        /// </summary>
        /// <param name="i">
        /// index of the hash algorithm, starting from 0
        /// </param>
        /// <returns>
        /// a pointer to a static string or NULL if i is out of range
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_names")]
        public static extern sbyte* av_hash_names(int i);

        /// <summary>
        /// Get the name of the algorithm corresponding to the given hash context.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_get_name")]
        public static extern sbyte* av_hash_get_name(libavutil.AVHashContext* ctx);

        /// <summary>
        /// Get the size of the resulting hash value in bytes.
        /// 
        /// The pointer passed to av_hash_final have space for at least this many
        /// bytes.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_get_size")]
        public static extern int av_hash_get_size(libavutil.AVHashContext* ctx);

        /// <summary>
        /// Initialize or reset a hash context.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_init")]
        public static extern void av_hash_init(libavutil.AVHashContext* ctx);

        /// <summary>
        /// Update a hash context with additional data.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_update")]
        public static extern void av_hash_update(libavutil.AVHashContext* ctx, byte* src, int len);

        /// <summary>
        /// Finalize a hash context and compute the actual hash value.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_final")]
        public static extern void av_hash_final(libavutil.AVHashContext* ctx, byte* dst);

        /// <summary>
        /// Finalize a hash context and compute the actual hash value.
        /// If size is smaller than the hash size, the hash is truncated;
        /// if size is larger, the buffer is padded with 0.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_final_bin")]
        public static extern void av_hash_final_bin(libavutil.AVHashContext* ctx, byte* dst, int size);

        /// <summary>
        /// Finalize a hash context and compute the actual hash value as a hex
        /// string.
        /// The string is always 0-terminated.
        /// If size is smaller than 2 * hash_size + 1, the hex string is truncated.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_final_hex")]
        public static extern void av_hash_final_hex(libavutil.AVHashContext* ctx, byte* dst, int size);

        /// <summary>
        /// Finalize a hash context and compute the actual hash value as a base64
        /// string.
        /// The string is always 0-terminated.
        /// If size is smaller than AV_BASE64_SIZE(hash_size), the base64 string is
        /// truncated.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_final_b64")]
        public static extern void av_hash_final_b64(libavutil.AVHashContext* ctx, byte* dst, int size);

        /// <summary>
        /// Free hash context.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_freep")]
        public static extern void av_hash_freep(libavutil.AVHashContext** ctx);

        /// <summary>
        /// Free hash context.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_hash_freep")]
        public static extern void av_hash_freep(ref libavutil.AVHashContext* ctx);
    }
}
