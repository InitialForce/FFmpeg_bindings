//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#pragma warning disable 1584,1711,1572,1581,1580,1573
using System;
using System.Runtime.InteropServices;
using System.Security;
using FFmpeg;

namespace FFmpeg
{
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "UnusedMember.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "InconsistentNaming")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantUnsafeContext")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "FieldCanBeMadeReadOnly.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "PartialTypeWithSinglePart")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantNameQualifier")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "ArrangeModifiersOrder")]
    public unsafe static partial class libavcodec
    {
        public const sbyte MAX_DWT_LEVELS = 5;

        /// <summary>
        /// Parse code values:
        /// 
        /// Dirac Specification -&gt;
        /// 9.6.1  Table 9.1
        /// 
        /// VC-2 Specification  -&gt;
        /// 10.4.1 Table 10.1
        /// </summary>
        public enum DiracParseCodes
        {
            DIRAC_PCODE_SEQ_HEADER = 0,
            DIRAC_PCODE_END_SEQ = 16,
            DIRAC_PCODE_AUX = 32,
            DIRAC_PCODE_PAD = 48,
            DIRAC_PCODE_PICTURE_CODED = 8,
            DIRAC_PCODE_PICTURE_RAW = 72,
            DIRAC_PCODE_PICTURE_LOW_DEL = 200,
            DIRAC_PCODE_PICTURE_HQ = 232,
            DIRAC_PCODE_INTER_NOREF_CO1 = 10,
            DIRAC_PCODE_INTER_NOREF_CO2 = 9,
            DIRAC_PCODE_INTER_REF_CO1 = 13,
            DIRAC_PCODE_INTER_REF_CO2 = 14,
            DIRAC_PCODE_INTRA_REF_CO = 12,
            DIRAC_PCODE_INTRA_REF_RAW = 76,
            DIRAC_PCODE_INTRA_REF_PICT = 204,
            DIRAC_PCODE_MAGIC = 1111638852
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct DiracVersionInfo
        {
            public int major;

            public int minor;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVDiracSeqHeader
        {
            public uint width;

            public uint height;

            /// <summary>
            /// &lt; 0: 444  1: 422  2: 420
            /// </summary>
            public byte chroma_format;

            public byte interlaced;

            public byte top_field_first;

            /// <summary>
            /// &lt; index into dirac_frame_rate[]
            /// </summary>
            public byte frame_rate_index;

            /// <summary>
            /// &lt; index into dirac_aspect_ratio[]
            /// </summary>
            public byte aspect_ratio_index;

            public ushort clean_width;

            public ushort clean_height;

            public ushort clean_left_offset;

            public ushort clean_right_offset;

            /// <summary>
            /// &lt; index into dirac_pixel_range_presets[]
            /// </summary>
            public byte pixel_range_index;

            /// <summary>
            /// &lt; index into dirac_color_spec_presets[]
            /// </summary>
            public byte color_spec_index;

            public int profile;

            public int level;

            public libavutil.AVRational framerate;

            public libavutil.AVRational sample_aspect_ratio;

            public libavutil.AVPixelFormat pix_fmt;

            public libavutil.AVColorRange color_range;

            public libavutil.AVColorPrimaries color_primaries;

            public libavutil.AVColorTransferCharacteristic color_trc;

            public libavutil.AVColorSpace colorspace;

            public libavcodec.DiracVersionInfo version;

            public int bit_depth;
        }

        /// <summary>
        /// Parse a Dirac sequence header.
        /// </summary>
        /// <param name="dsh">
        /// this function will allocate and fill an AVDiracSeqHeader struct
        /// and write it into this pointer. The caller must free it with
        /// av_free().
        /// </param>
        /// <param name="buf">
        /// the data buffer
        /// </param>
        /// <param name="buf_size">
        /// the size of the data buffer in bytes
        /// </param>
        /// <param name="log_ctx">
        /// if non-NULL, this function will log errors here
        /// </param>
        /// <returns>
        /// 0 on success, a negative AVERROR code on failure
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVCODEC_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_dirac_parse_sequence_header")]
        public static extern int av_dirac_parse_sequence_header(libavcodec.AVDiracSeqHeader** dsh, byte* buf, global::System.UIntPtr buf_size, void* log_ctx);

        /// <summary>
        /// Parse a Dirac sequence header.
        /// </summary>
        /// <param name="dsh">
        /// this function will allocate and fill an AVDiracSeqHeader struct
        /// and write it into this pointer. The caller must free it with
        /// av_free().
        /// </param>
        /// <param name="buf">
        /// the data buffer
        /// </param>
        /// <param name="buf_size">
        /// the size of the data buffer in bytes
        /// </param>
        /// <param name="log_ctx">
        /// if non-NULL, this function will log errors here
        /// </param>
        /// <returns>
        /// 0 on success, a negative AVERROR code on failure
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVCODEC_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_dirac_parse_sequence_header")]
        public static extern int av_dirac_parse_sequence_header(ref libavcodec.AVDiracSeqHeader* dsh, byte* buf, global::System.UIntPtr buf_size, void* log_ctx);
    }
}
