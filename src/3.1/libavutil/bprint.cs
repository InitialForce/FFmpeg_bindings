//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#pragma warning disable 1584,1711,1572,1581,1580,1573
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "UnusedMember.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "InconsistentNaming")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantUnsafeContext")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "FieldCanBeMadeReadOnly.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "PartialTypeWithSinglePart")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantNameQualifier")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "ArrangeModifiersOrder")]
    public unsafe static partial class libavutil
    {
        public const sbyte AV_BPRINT_SIZE_AUTOMATIC = 1;

        public const sbyte AV_BPRINT_SIZE_COUNT_ONLY = 0;

        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct ff_pad_helper_AVBPrint
        {
            public sbyte* str;

            public uint len;

            public uint size;

            public uint size_max;

            public fixed sbyte reserved_internal_buffer[1];
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVBPrint
        {
            public sbyte* str;

            public uint len;

            public uint size;

            public uint size_max;

            public fixed sbyte reserved_internal_buffer[1];

            public fixed sbyte reserved_padding[1004];
        }

        /// <summary>
        /// Init a print buffer.
        /// </summary>
        /// <param name="buf">
        /// buffer to init
        /// </param>
        /// <param name="size_init">
        /// initial size (including the final 0)
        /// </param>
        /// <param name="size_max">
        /// maximum size;
        /// 0 means do not write anything, just count the length;
        /// 1 is replaced by the maximum value for automatic storage;
        /// any large value means that the internal buffer will be
        /// reallocated as needed up to that limit; -1 is converted to
        /// UINT_MAX, the largest limit possible.
        /// Check also AV_BPRINT_SIZE_* macros.
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_init")]
        public static extern void av_bprint_init(libavutil.AVBPrint* buf, uint size_init, uint size_max);

        /// <summary>
        /// Init a print buffer using a pre-existing buffer.
        /// 
        /// The buffer will not be reallocated.
        /// </summary>
        /// <param name="buf">
        /// buffer structure to init
        /// </param>
        /// <param name="buffer">
        /// byte buffer to use for the string data
        /// </param>
        /// <param name="size">
        /// size of buffer
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_init_for_buffer")]
        public static extern void av_bprint_init_for_buffer(libavutil.AVBPrint* buf, System.Text.StringBuilder buffer, uint size);

        /// <summary>
        /// Append a formatted string to a print buffer.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprintf")]
        public static extern void av_bprintf(libavutil.AVBPrint* buf, string fmt);

        /// <summary>
        /// Append char c n times to a print buffer.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_chars")]
        public static extern void av_bprint_chars(libavutil.AVBPrint* buf, sbyte c, uint n);

        /// <summary>
        /// Append data to a print buffer.
        /// 
        /// param buf  bprint buffer to use
        /// param data pointer to data
        /// param size size of data
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_append_data")]
        public static extern void av_bprint_append_data(libavutil.AVBPrint* buf, string data, uint size);

        /// <summary>
        /// Allocate bytes in the buffer for external use.
        /// </summary>
        /// <param name="[in]">
        /// buf          buffer structure
        /// </param>
        /// <param name="[in]">
        /// size         required size
        /// </param>
        /// <param name="[out]">
        /// mem          pointer to the memory area
        /// </param>
        /// <param name="[out]">
        /// actual_size  size of the memory area after allocation;
        /// can be larger or smaller than size
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_get_buffer")]
        public static extern void av_bprint_get_buffer(libavutil.AVBPrint* buf, uint size, byte** mem, uint* actual_size);

        /// <summary>
        /// Allocate bytes in the buffer for external use.
        /// </summary>
        /// <param name="[in]">
        /// buf          buffer structure
        /// </param>
        /// <param name="[in]">
        /// size         required size
        /// </param>
        /// <param name="[out]">
        /// mem          pointer to the memory area
        /// </param>
        /// <param name="[out]">
        /// actual_size  size of the memory area after allocation;
        /// can be larger or smaller than size
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_get_buffer")]
        public static extern void av_bprint_get_buffer(libavutil.AVBPrint* buf, uint size, ref byte* mem, uint* actual_size);

        /// <summary>
        /// Reset the string to "" but keep internal allocated data.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_clear")]
        public static extern void av_bprint_clear(libavutil.AVBPrint* buf);

        /// <summary>
        /// Test if the print buffer is complete (not truncated).
        /// 
        /// It may have been truncated due to a memory allocation failure
        /// or the size_max limit (compare size and size_max if necessary).
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_is_complete")]
        public static extern int av_bprint_is_complete(libavutil.AVBPrint* buf);

        /// <summary>
        /// Finalize a print buffer.
        /// 
        /// The print buffer can no longer be used afterwards,
        /// but the len and size fields are still valid.
        /// 
        /// @arg[out] ret_str  if not NULL, used to return a permanent copy of the
        /// buffer contents, or NULL if memory allocation fails;
        /// if NULL, the buffer is discarded and freed
        /// </summary>
        /// <returns>
        /// 0 for success or error code (probably AVERROR(ENOMEM))
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_finalize")]
        public static extern int av_bprint_finalize(libavutil.AVBPrint* buf, sbyte** ret_str);

        /// <summary>
        /// Finalize a print buffer.
        /// 
        /// The print buffer can no longer be used afterwards,
        /// but the len and size fields are still valid.
        /// 
        /// @arg[out] ret_str  if not NULL, used to return a permanent copy of the
        /// buffer contents, or NULL if memory allocation fails;
        /// if NULL, the buffer is discarded and freed
        /// </summary>
        /// <returns>
        /// 0 for success or error code (probably AVERROR(ENOMEM))
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_finalize")]
        public static extern int av_bprint_finalize(libavutil.AVBPrint* buf, ref System.Text.StringBuilder ret_str);

        /// <summary>
        /// Escape the content in src and append it to dstbuf.
        /// </summary>
        /// <param name="dstbuf">
        /// already inited destination bprint buffer
        /// </param>
        /// <param name="src">
        /// string containing the text to escape
        /// </param>
        /// <param name="special_chars">
        /// string containing the special characters which
        /// need to be escaped, can be NULL
        /// </param>
        /// <param name="mode">
        /// escape mode to employ, see AV_ESCAPE_MODE_* macros.
        /// Any unknown value for mode will be considered equivalent to
        /// AV_ESCAPE_MODE_BACKSLASH, but this behaviour can change without
        /// notice.
        /// </param>
        /// <param name="flags">
        /// flags which control how to escape, see AV_ESCAPE_FLAG_* macros
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_bprint_escape")]
        public static extern void av_bprint_escape(libavutil.AVBPrint* dstbuf, string src, string special_chars, libavutil.AVEscapeMode mode, int flags);
    }
}
