//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#pragma warning disable 1584,1711,1572,1581,1580,1573
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    /// <summary>
    /// @defgroup lavu_crc32 CRC32
    /// @ingroup lavu_crypto
    /// @{
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "UnusedMember.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "InconsistentNaming")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantUnsafeContext")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "FieldCanBeMadeReadOnly.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "PartialTypeWithSinglePart")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantNameQualifier")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "ArrangeModifiersOrder")]
    public unsafe static partial class libavutil
    {
        public enum AVCRCId
        {
            AV_CRC_8_ATM = 0,
            AV_CRC_16_ANSI = 1,
            AV_CRC_16_CCITT = 2,
            AV_CRC_32_IEEE = 3,
            AV_CRC_32_IEEE_LE = 4,
            AV_CRC_16_ANSI_LE = 5,
            AV_CRC_24_IEEE = 12,
            AV_CRC_MAX = 13
        }

        /// <summary>
        /// Initialize a CRC table.
        /// </summary>
        /// <param name="ctx">
        /// must be an array of size sizeof(AVCRC)*257 or sizeof(AVCRC)*1024
        /// </param>
        /// <param name="le">
        /// If 1, the lowest bit represents the coefficient for the highest
        /// exponent of the corresponding polynomial (both for poly and
        /// actual CRC).
        /// If 0, you must swap the CRC parameter and the result of av_crc
        /// if you need the standard representation (can be simplified in
        /// most cases to e.g. bswap16):
        /// av_bswap32(crc &lt;&lt; (32-bits))
        /// </param>
        /// <param name="bits">
        /// number of bits for the CRC
        /// </param>
        /// <param name="poly">
        /// generator polynomial without the x**bits coefficient, in the
        /// representation as specified by le
        /// </param>
        /// <param name="ctx_size">
        /// size of ctx in bytes
        /// </param>
        /// <returns>
        /// &lt;0 on failure
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_crc_init")]
        public static extern int av_crc_init(uint* ctx, int le, int bits, uint poly, int ctx_size);

        /// <summary>
        /// Get an initialized standard CRC table.
        /// </summary>
        /// <param name="crc_id">
        /// ID of a standard CRC
        /// </param>
        /// <returns>
        /// a pointer to the CRC table or NULL on failure
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_crc_get_table")]
        public static extern uint* av_crc_get_table(libavutil.AVCRCId crc_id);

        /// <summary>
        /// Calculate the CRC of a block.
        /// </summary>
        /// <param name="crc">
        /// CRC of previous blocks if any or initial value for CRC
        /// </param>
        /// <returns>
        /// CRC updated with the data from the given block
        /// 
        /// @see av_crc_init() "le" parameter
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_crc")]
        public static extern uint av_crc(uint* ctx, uint crc, byte* buffer, global::System.UIntPtr length);
    }
}
