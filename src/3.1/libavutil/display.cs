//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#pragma warning disable 1584,1711,1572,1581,1580,1573
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "UnusedMember.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "InconsistentNaming")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantUnsafeContext")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "FieldCanBeMadeReadOnly.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "PartialTypeWithSinglePart")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantNameQualifier")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "ArrangeModifiersOrder")]
    public unsafe static partial class libavutil
    {
        /// <summary>
        /// Extract the rotation component of the transformation matrix.
        /// </summary>
        /// <param name="matrix">
        /// the transformation matrix
        /// </param>
        /// <returns>
        /// the angle (in degrees) by which the transformation rotates the frame
        /// counterclockwise. The angle will be in range [-180.0, 180.0],
        /// or NaN if the matrix is singular.
        /// </returns>
        /// <remark>
        /// floating point numbers are inherently inexact, so callers are
        /// recommended to round the return value to nearest integer before use.
        /// </remark>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_display_rotation_get")]
        public static extern double av_display_rotation_get(int* matrix);

        /// <summary>
        /// Initialize a transformation matrix describing a pure counterclockwise
        /// rotation by the specified angle (in degrees).
        /// </summary>
        /// <param name="matrix">
        /// an allocated transformation matrix (will be fully overwritten
        /// by this function)
        /// </param>
        /// <param name="angle">
        /// rotation angle in degrees.
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_display_rotation_set")]
        public static extern void av_display_rotation_set(int* matrix, double angle);

        /// <summary>
        /// Flip the input matrix horizontally and/or vertically.
        /// </summary>
        /// <param name="matrix">
        /// an allocated transformation matrix
        /// </param>
        /// <param name="hflip">
        /// whether the matrix should be flipped horizontally
        /// </param>
        /// <param name="vflip">
        /// whether the matrix should be flipped vertically
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_display_matrix_flip")]
        public static extern void av_display_matrix_flip(int* matrix, int hflip, int vflip);
    }
}
