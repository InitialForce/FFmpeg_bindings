//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#pragma warning disable 1584,1711,1572,1581,1580,1573
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "UnusedMember.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "InconsistentNaming")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantUnsafeContext")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "FieldCanBeMadeReadOnly.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "PartialTypeWithSinglePart")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantNameQualifier")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "ArrangeModifiersOrder")]
    public unsafe static partial class libavutil
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVFifoBuffer
        {
            public byte* buffer;

            public byte* rptr;

            public byte* wptr;

            public byte* end;

            public uint rndx;

            public uint wndx;
        }

        /// <summary>
        /// Initialize an AVFifoBuffer.
        /// </summary>
        /// <param name="size">
        /// of FIFO
        /// </param>
        /// <returns>
        /// AVFifoBuffer or NULL in case of memory allocation failure
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_alloc")]
        public static extern libavutil.AVFifoBuffer* av_fifo_alloc(uint size);

        /// <summary>
        /// Initialize an AVFifoBuffer.
        /// </summary>
        /// <param name="nmemb">
        /// number of elements
        /// </param>
        /// <param name="size">
        /// size of the single element
        /// </param>
        /// <returns>
        /// AVFifoBuffer or NULL in case of memory allocation failure
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_alloc_array")]
        public static extern libavutil.AVFifoBuffer* av_fifo_alloc_array(global::System.UIntPtr nmemb, global::System.UIntPtr size);

        /// <summary>
        /// Free an AVFifoBuffer.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to free
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_free")]
        public static extern void av_fifo_free(libavutil.AVFifoBuffer* f);

        /// <summary>
        /// Free an AVFifoBuffer and reset pointer to NULL.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to free
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_freep")]
        public static extern void av_fifo_freep(libavutil.AVFifoBuffer** f);

        /// <summary>
        /// Free an AVFifoBuffer and reset pointer to NULL.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to free
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_freep")]
        public static extern void av_fifo_freep(ref libavutil.AVFifoBuffer* f);

        /// <summary>
        /// Reset the AVFifoBuffer to the state right after av_fifo_alloc, in
        /// particular it is emptied.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to reset
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_reset")]
        public static extern void av_fifo_reset(libavutil.AVFifoBuffer* f);

        /// <summary>
        /// Return the amount of data in bytes in the AVFifoBuffer, that is the
        /// amount of data you can read from it.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to read from
        /// </param>
        /// <returns>
        /// size
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_size")]
        public static extern int av_fifo_size(libavutil.AVFifoBuffer* f);

        /// <summary>
        /// Return the amount of space in bytes in the AVFifoBuffer, that is the
        /// amount of data you can write into it.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to write into
        /// </param>
        /// <returns>
        /// size
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_space")]
        public static extern int av_fifo_space(libavutil.AVFifoBuffer* f);

        /// <summary>
        /// Feed data at specific position from an AVFifoBuffer to a user-supplied
        /// callback.
        /// Similar as av_fifo_gereric_read but without discarding data.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to read from
        /// </param>
        /// <param name="offset">
        /// offset from current read position
        /// </param>
        /// <param name="buf_size">
        /// number of bytes to read
        /// </param>
        /// <param name="func">
        /// generic read function
        /// </param>
        /// <param name="dest">
        /// data destination
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_generic_peek_at")]
        public static extern int av_fifo_generic_peek_at(libavutil.AVFifoBuffer* f, void* dest, int offset, int buf_size, global::System.IntPtr func);

        /// <summary>
        /// Feed data from an AVFifoBuffer to a user-supplied callback.
        /// Similar as av_fifo_gereric_read but without discarding data.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to read from
        /// </param>
        /// <param name="buf_size">
        /// number of bytes to read
        /// </param>
        /// <param name="func">
        /// generic read function
        /// </param>
        /// <param name="dest">
        /// data destination
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_generic_peek")]
        public static extern int av_fifo_generic_peek(libavutil.AVFifoBuffer* f, void* dest, int buf_size, global::System.IntPtr func);

        /// <summary>
        /// Feed data from an AVFifoBuffer to a user-supplied callback.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to read from
        /// </param>
        /// <param name="buf_size">
        /// number of bytes to read
        /// </param>
        /// <param name="func">
        /// generic read function
        /// </param>
        /// <param name="dest">
        /// data destination
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_generic_read")]
        public static extern int av_fifo_generic_read(libavutil.AVFifoBuffer* f, void* dest, int buf_size, global::System.IntPtr func);

        /// <summary>
        /// Feed data from a user-supplied callback to an AVFifoBuffer.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to write to
        /// </param>
        /// <param name="src">
        /// data source; non-const since it may be used as a
        /// modifiable context by the function defined in func
        /// </param>
        /// <param name="size">
        /// number of bytes to write
        /// </param>
        /// <param name="func">
        /// generic write function; the first parameter is src,
        /// the second is dest_buf, the third is dest_buf_size.
        /// func must return the number of bytes written to dest_buf, or &lt;= 0 to
        /// indicate no more data available to write.
        /// If func is NULL, src is interpreted as a simple byte array for source
        /// data.
        /// </param>
        /// <returns>
        /// the number of bytes written to the FIFO
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_generic_write")]
        public static extern int av_fifo_generic_write(libavutil.AVFifoBuffer* f, void* src, int size, global::System.IntPtr func);

        /// <summary>
        /// Resize an AVFifoBuffer.
        /// In case of reallocation failure, the old FIFO is kept unchanged.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to resize
        /// </param>
        /// <param name="size">
        /// new AVFifoBuffer size in bytes
        /// </param>
        /// <returns>
        /// &lt;0 for failure, &gt;=0 otherwise
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_realloc2")]
        public static extern int av_fifo_realloc2(libavutil.AVFifoBuffer* f, uint size);

        /// <summary>
        /// Enlarge an AVFifoBuffer.
        /// In case of reallocation failure, the old FIFO is kept unchanged.
        /// The new fifo size may be larger than the requested size.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to resize
        /// </param>
        /// <param name="additional_space">
        /// the amount of space in bytes to allocate in addition to av_fifo_size()
        /// </param>
        /// <returns>
        /// &lt;0 for failure, &gt;=0 otherwise
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_grow")]
        public static extern int av_fifo_grow(libavutil.AVFifoBuffer* f, uint additional_space);

        /// <summary>
        /// Read and discard the specified amount of data from an AVFifoBuffer.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to read from
        /// </param>
        /// <param name="size">
        /// amount of data to read in bytes
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_drain")]
        public static extern void av_fifo_drain(libavutil.AVFifoBuffer* f, int size);

        /// <summary>
        /// Return a pointer to the data stored in a FIFO buffer at a certain
        /// offset.
        /// The FIFO buffer is not modified.
        /// </summary>
        /// <param name="f">
        /// AVFifoBuffer to peek at, f must be non-NULL
        /// </param>
        /// <param name="offs">
        /// an offset in bytes, its absolute value must be less
        /// than the used buffer size or the returned pointer will
        /// point outside to the buffer data.
        /// The used buffer size can be checked with av_fifo_size().
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_fifo_peek2")]
        public static extern byte* av_fifo_peek2(libavutil.AVFifoBuffer* f, int offs);
    }
}
