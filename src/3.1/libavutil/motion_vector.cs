//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#pragma warning disable 1584,1711,1572,1581,1580,1573
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "UnusedMember.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "InconsistentNaming")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantUnsafeContext")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "FieldCanBeMadeReadOnly.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "PartialTypeWithSinglePart")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantNameQualifier")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "ArrangeModifiersOrder")]
    public unsafe static partial class libavutil
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVMotionVector
        {
            /// <summary>
            /// Where the current macroblock comes from; negative value when it comes
            /// from the past, positive value when it comes from the future.
            /// XXX: set exact relative ref frame reference instead of a +/- 1
            /// "direction".
            /// </summary>
            public int source;

            /// <summary>
            /// Width and height of the block.
            /// </summary>
            public byte w;

            /// <summary>
            /// Width and height of the block.
            /// </summary>
            public byte h;

            /// <summary>
            /// Absolute source position. Can be outside the frame area.
            /// </summary>
            public short src_x;

            /// <summary>
            /// Absolute source position. Can be outside the frame area.
            /// </summary>
            public short src_y;

            /// <summary>
            /// Absolute destination position. Can be outside the frame area.
            /// </summary>
            public short dst_x;

            /// <summary>
            /// Absolute destination position. Can be outside the frame area.
            /// </summary>
            public short dst_y;

            /// <summary>
            /// Extra flag information.
            /// Currently unused.
            /// </summary>
            public ulong flags;

            /// <summary>
            /// Motion vector
            /// src_x = dst_x + motion_x / motion_scale
            /// src_y = dst_y + motion_y / motion_scale
            /// </summary>
            public int motion_x;

            /// <summary>
            /// Motion vector
            /// src_x = dst_x + motion_x / motion_scale
            /// src_y = dst_y + motion_y / motion_scale
            /// </summary>
            public int motion_y;

            public ushort motion_scale;
        }
    }
}
