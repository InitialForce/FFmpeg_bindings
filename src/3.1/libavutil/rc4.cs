//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#pragma warning disable 1584,1711,1572,1581,1580,1573
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace FFmpeg
{
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "UnusedMember.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "InconsistentNaming")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantUnsafeContext")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "MemberCanBePrivate.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "FieldCanBeMadeReadOnly.Global")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "PartialTypeWithSinglePart")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "RedundantNameQualifier")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("ReSharper", "ArrangeModifiersOrder")]
    public unsafe static partial class libavutil
    {
        /// <summary>
        /// @defgroup lavu_rc4 RC4
        /// @ingroup lavu_crypto
        /// @{
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public unsafe partial struct AVRC4
        {
            public fixed byte state[256];

            public int x;

            public int y;
        }

        /// <summary>
        /// Allocate an AVRC4 context.
        /// </summary>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_rc4_alloc")]
        public static extern libavutil.AVRC4* av_rc4_alloc();

        /// <summary>
        /// @brief Initializes an AVRC4 context.
        /// </summary>
        /// <param name="key_bits">
        /// must be a multiple of 8
        /// </param>
        /// <param name="decrypt">
        /// 0 for encryption, 1 for decryption, currently has no effect
        /// </param>
        /// <returns>
        /// zero on success, negative value otherwise
        /// </returns>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_rc4_init")]
        public static extern int av_rc4_init(libavutil.AVRC4* d, byte* key, int key_bits, int decrypt);

        /// <summary>
        /// @brief Encrypts / decrypts using the RC4 algorithm.
        /// </summary>
        /// <param name="count">
        /// number of bytes
        /// </param>
        /// <param name="dst">
        /// destination array, can be equal to src
        /// </param>
        /// <param name="src">
        /// source array, can be equal to dst, may be NULL
        /// </param>
        /// <param name="iv">
        /// not (yet) used for RC4, should be NULL
        /// </param>
        /// <param name="decrypt">
        /// 0 for encryption, 1 for decryption, not (yet) used
        /// </param>
        [SuppressUnmanagedCodeSecurity]
        [DllImport(AVUTIL_DLL_NAME, CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
            CharSet = CharSet.Ansi, ExactSpelling = true,
            EntryPoint="av_rc4_crypt")]
        public static extern void av_rc4_crypt(libavutil.AVRC4* d, byte* dst, byte* src, int count, byte* iv, int decrypt);
    }
}
